# -*- coding: utf-8 -*-
# ----------------------------------------------------------------------------------------------------------------------

import time
import types
import random
import os.path
import json
import os.path
from datetime import datetime

# ----------------------------------------------------------------------------------------------------------------------

import telebot
import re
import schedule
from telebot import types
from telegram_bot_calendar import WMonthTelegramCalendar
import hashlib
from rich.traceback import install

# ----------------------------------------------------------------------------------------------------------------------

import log_analysis                 # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∂—É—Ä–Ω–∞–ª–∞ –ª–æ–≥–æ–≤
import personal_users               # —Ä–∞–±–æ—Ç–∞ —Å –ø–æ–ª–Ω—ã–º –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
import commands                     # —Ä–∞–±–æ—Ç–∞ —Å –±–ª–æ–∫–æ–º –∫–æ–º–∞–Ω–¥
import blocks                       # –º–æ–¥—É–ª—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç—É–ø–æ–≤
import integrations                 # –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
import cerberus                     # –º–æ–¥—É–ª—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
import configs                      # —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–∞, –∫–ª—é—á–µ–π –∏ –ø–∞—Ä–æ–ª–µ–π
import firewall_mars                # —Ñ–∞–µ—Ä–≤–æ–ª
import calendars                    # —Ä–∞–±–æ—Ç–∞ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
import mailing_list                 # —Ä–∞—Å—Å—ã–ª–∫–∏
import settings_config              # –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥–æ–º —Å–∏—Å—Ç–µ–º—ã
import clues                        # –±–ª–æ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º –ø–æ–¥—Å–∫–∞–∑–æ–∫
import postgres_init                # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
import naumen_search                # –º–æ–¥—É–ª—å –ø–æ–∏—Å–∫–∞ –≤ –±–∞–Ω–∫–µ
import logs                         # –º–æ–¥—É–ª—å –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞
import protect_content              # –º–æ–¥—É–ª—å –∑–∞—â–∏—Ç—ã –æ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
import keyboards                    # –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
import admins                       # –±–ª–æ–∫ —Ä–∞–±–æ—Ç—ã —Å –∞–¥–º–∏–Ω–∞–º–∏
import errors                       # –±–ª–æ–∫ —Ä–∞–±–æ—Ç—ã —Å –æ—à–∏–±–∫–æ–π
import rfc_search                   # –º–æ–¥—É–ª—å –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ rfc
import neuron                       # –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
import servers                      # –º–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
import long_text                    # –º–æ–¥—É–ª—å –≥–¥–µ —Ö—Ä–∞–Ω–∏–º –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–∞
import callbacks                    # –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤

# ----------------------------------------------------------------------------------------------------------------------

client = telebot.TeleBot(configs.telegram['token'])

cursor_main, conn_main = postgres_init.postgres_init()

# global us_id
# us_id = 0

uuid = None  # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á —Ä—Ñ—Å —Ä–∞–±–æ—Ç –≤ –±–∞–Ω–∫–µ
word_file = None
agreements = None
calendar_build = None
full_name = None
check_l_name = True
time_now = datetime.now()
work_time = 0
exp_rfc_search = "False"


###############################################################################
# ###########################–ó–ê–ü–£–°–ö –ë–û–¢–ê#######################################
###############################################################################


def access_registered(message):
    protect_content_check = protect_content.protect_content_check_fn(message.chat.id)
    client.send_chat_action(message.chat.id,
                            action="typing")
    # –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫ –≤ 1 –∫–æ–ª–æ–Ω–∫—É
    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton('üì≤ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è',
                                       callback_data='—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è 1—Å')
    item2 = types.InlineKeyboardButton('‚úâÔ∏è –ü–æ–º–æ—â—å',
                                       callback_data='–ø–æ–º–æ—â—å –ø—Ä–∏ –±–ª–æ–∫–µ')
    markup.add(item1, item2)
    client.send_chat_action(message.chat.id, action="typing")
    client.send_message(message.chat.id,
                        "‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∫ —á–∞—Ç-–±–æ—Ç—É RFC –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n"
                        "üì≤ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Ä–µ—Å—É—Ä—Å–∞",
                        parse_mode="html", reply_markup=markup,
                        protect_content=protect_content_check)
    return


def command_blocked(message, us_id, full_user_name, username):
    username = personal_users.user_nickname(username)
    protect_content_check = protect_content.protect_content_check_fn(us_id)

    time.sleep(2)
    login = message.text.lower()

    client.send_chat_action(message.chat.id, action="typing")
    client.send_message(message.chat.id,
                        "‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n"
                        "üìë ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>" + str(us_id) + "</b> \n"
                                                                "üì≤ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Ä–µ—Å—É—Ä—Å–∞, "
                                                                "–¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", parse_mode="html",
                        protect_content=protect_content_check)
    client.send_message(message.chat.id,
                        "‚ö†Ô∏è Access to the command blocked!\n"
                        "üìë ID user: <b>" + str(us_id) + "</b> \n"
                                                        "üì≤ Contact the system administrator of the "
                                                        "resource to clarify access rights",
                        parse_mode="html",
                        protect_content=protect_content_check)

    text_system_command = f"‚ö†Ô∏è<b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã!</b>\n" \
                          f" \n" \
                          f"–ò–º—è: <b>{full_user_name}</b> \n" \
                          f"–ù–∏–∫–Ω–µ–π–º: <b>{username}</b> \n" \
                          f" \n" \
                          f"üíæ –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <i><b>{login}</b></i>"
    admins.admin_notification_message(client, text_system_command)

    # –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª –ª–æ–≥–∞
    if full_name is None:
        full_user_name = firewall_mars.id_in_name(us_id)

    logs.log_pass(us_id, '–û—à–∏–±–∫–∞',
                  f'–î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {full_user_name} –∫ –∫–æ–º–∞–Ω–¥–µ /{login} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
    return


def start_script(message, us_id, protect_content_check):
    postgres_init.connect_bd(message)

    access_check = firewall_mars.access_check(message.from_user.id)
    if access_check:
        client.send_chat_action(message.chat.id, action="typing")
        # –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫ –≤ 1 –∫–æ–ª–æ–Ω–∫—É
        markup = types.InlineKeyboardMarkup(row_width=2)
        item1 = types.InlineKeyboardButton('‚úé –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É', callback_data='–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞')
        item2 = types.InlineKeyboardButton('üìù –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è', callback_data='–û–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º')
        markup.add(item1, item2)
        client.send_message(message.chat.id,
                            "–ó–∞–ø—É—Å–∫ <b>RFC Informer Bot</b> v.<b>" +
                            str(configs.version) + "</b> –æ—Ç <b>" +
                            str(configs.data_version_update) + "</b>",
                            parse_mode="html", reply_markup=markup,
                            protect_content=protect_content_check)

        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ',
                      f'–ó–∞–ø—É—Å–∫ RFC Informer Bot v.{configs.version} –æ—Ç {configs.data_version_update}')
        return
    else:
        logs.log_pass(us_id, '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞', f'–¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
        return


@client.message_handler(content_types=["audio", "document", "photo", "sticker", "video", "video_note", "voice",
                                       "location", "contact", "new_chat_members", "left_chat_member", "new_chat_title",
                                       "new_chat_photo", "delete_chat_photo", "group_chat_created",
                                       "supergroup_chat_created", "channel_chat_created", "migrate_to_chat_id",
                                       "migrate_from_chat_id", "pinned_message"])
def handler_any_type(message):
    reaction_type_not_answer = ["ü§∑‚Äç‚ôÇ", "ü§∑", "ü§∑‚Äç‚ôÄ"]
    client.set_message_reaction(message.chat.id, message_id=message.message_id,
                                reaction=[types.ReactionTypeEmoji(random.choice(reaction_type_not_answer))])
    client.send_message(message.chat.id, random.choice(long_text.wrong_content_types),
                        parse_mode="html",)
    logs.log_pass(message, '–û—à–∏–±–∫–∞', f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π content_types")
    return


@client.message_handler(commands=['start', 'reset_1c_session'])
def start_messages(message):
    us_id = message.from_user.id
    username = message.from_user.username
    full_name_user = message.from_user.full_name

    postgres_init.initialization(user_id=us_id, user_name=full_name_user, username=username,
                                 department='', guid='', access="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

    postgres_init.protect_content_fn(user_id=us_id, protect_content_check=1)

    protect_content_check = protect_content.protect_content_check_fn(us_id)

    start_script(message, us_id, protect_content_check)

    return


@client.message_handler(commands=['reset'])
def start_messages(message):
    us_id = message.from_user.id
    username = message.from_user.username

    protect_content_check = protect_content.protect_content_check_fn(us_id)
    start_script(message, us_id, protect_content_check)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø –∏ –¥–∞–ª—å–Ω–µ–π—à–∏–π –±–ª–æ–∫ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    access_check = firewall_mars.access_check(message.from_user.id)
    if not access_check:
        blocks.access_blocked(message, us_id, full_name, username, client)
        return


@client.message_handler(content_types=['text'])
def get_text(message):
    cursor, conn = postgres_init.postgres_init()

    us_id = message.from_user.id
    us_name = message.from_user.first_name
    us_surname = message.from_user.last_name
    username = message.from_user.username

    protect_content_check = protect_content.protect_content_check_fn(us_id)
    full_name_user = personal_users.user_name(us_id, message)

    # ##############################################################################
    # ######################### –°–¢–ê–†–¢ –°–ö–†–ò–ü–¢–ê ######################################
    # ##############################################################################
    if '/reset' == message.text.lower():
        start_script(message, us_id, protect_content_check)
        return

    reset_call = ['/start', '/reset', '/command06', '/command07']
    for reset_el in reset_call:
        if reset_el == message.text.lower():
            postgres_init.authentication_1c(user_id=us_id, user_login='', hash_password='',
                                            check_access=1, last_data=message.date)
            postgres_init.protect_content_fn(user_id=us_id, protect_content_check=0)
            start_script(message, us_id, protect_content_check)
            return

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø –∏ –¥–∞–ª—å–Ω–µ–π—à–∏–π –±–ª–æ–∫ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    access_check = firewall_mars.access_check(message.from_user.id)
    if not access_check:
        postgres_init.connect_bd(message)
        blocks.access_blocked(message, us_id, full_name_user, username, client)
        return
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –£–ó –ò–° 1–°
    cerberus.cerberus_check(client, us_id)
    # ##############################################################################
    # –û–°–ù–û–í–ù–û–ô –°–ö–†–ò–ü–¢ ##############################################################
    # ##############################################################################

    # –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏
    try:
        cursor.execute('SELECT search_rfc FROM rfc_number WHERE user_id = ' + str(us_id))
        search_rfc = cursor.fetchone()[0]
    except (Exception,):
        search_rfc = 0
    if search_rfc == 19:
        mailing_list.mailing_message(client, message, protect_content_check)
        return
    # –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Å —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏

    if '/command04' == message.text.lower():
        access_check = firewall_mars.access_check(message.from_user.id)
        if access_check:
            for admin_id in firewall_mars.level_list_check('–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'):
                if admin_id == message.from_user.id:
                    logs.log_pass(us_id, '–ö–æ–º–∞–Ω–¥–∞', f'/command04')

                    rtb = "!"
                    client.send_message(message.chat.id, "–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω" + str(rtb),
                                        parse_mode="html", protect_content=protect_content_check)
                    client.send_contact(message.chat.id,
                                        phone_number="79879534325",
                                        first_name="–¢–µ—Ä–µ—Ö–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä")
                    client.set_message_reaction(message.chat.id,
                                                message_id=message.message_id,
                                                reaction=[types.ReactionTypeEmoji("üëç")]
                                                )
                    return
            else:
                command_blocked(message, us_id, full_name_user, username)
                return
        else:
            blocks.access_blocked(message, us_id, full_name_user, username, client)
            return
    if '/command05' == message.text.lower():
        access_check = firewall_mars.access_check(message.from_user.id)
        if access_check:
            for admin_id in firewall_mars.level_list_check('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'):
                if admin_id == message.from_user.id:
                    logs.log_pass(us_id, '–ö–æ–º–∞–Ω–¥–∞', f'/command05')

                    client.send_document(message.chat.id, open(str(configs.file_log_name), "rb"),
                                         caption="–ñ—É—Ä–Ω–∞–ª –ª–æ–≥–æ–≤ –æ—Ç " + str(datetime.now().date())
                                         )
                    return
            else:
                command_blocked(message, us_id, full_name_user, username)
                return
        else:
            blocks.access_blocked(message, us_id, full_name_user, username, client)
            return
    if '/command13' == message.text.lower():
        access_check = firewall_mars.access_check(message.from_user.id)
        if access_check:
            for admin_id in firewall_mars.level_list_check('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'):
                if admin_id == message.from_user.id:
                    logs.log_pass(us_id, '–ö–æ–º–∞–Ω–¥–∞', f'/command13')

                    client.send_message(message.chat.id,
                                        "–í–∫–ª—é—á–µ–Ω <b>'–†–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞'</b>. "
                                        "–ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –±—É–¥—É—Ç "
                                        "–æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∂—É—Ä–Ω–∞–ª–µ –ª–æ–≥–æ–≤. "
                                        "–û—Ç–∫–ª—é—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–∞—Ö.\n",
                                        parse_mode="html", protect_content=protect_content_check)
                    postgres_init.mode_test(user_id=us_id, user_name=us_name,
                                            user_surname=us_surname, username=username, mode_test_fn="yes")
                    return
            else:
                command_blocked(message, us_id, full_name_user, username)
                return
        else:
            blocks.access_blocked(message, us_id, full_name_user, username, client)
            return
    if '/command14' == message.text.lower():
        access_check = firewall_mars.access_check(message.from_user.id)
        if access_check:
            for admin_id in firewall_mars.level_list_check('–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'):
                if admin_id == message.from_user.id:
                    postgres_init.mode_test(user_id=us_id, user_name=us_name, user_surname=us_surname,
                                            username=username, mode_test_fn="no")
                    logs.log_pass(us_id, '–ö–æ–º–∞–Ω–¥–∞', f'/command14')

                    client.send_message(message.chat.id,
                                        "<b>'–†–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞'</b> –æ—Ç–∫–ª—é—á–µ–Ω. "
                                        "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏–π –≤ –∂—É—Ä–Ω–∞–ª–µ "
                                        "–ª–æ–≥–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö.\n",
                                        parse_mode="html", protect_content=protect_content_check)
                    return
            else:
                command_blocked(message, us_id, full_name_user, username)
                return
        else:
            blocks.access_blocked(message, us_id, full_name_user, username, client)
            return

    if '/command16' == message.text.lower():
        access_check = firewall_mars.access_check(message.from_user.id)
        if access_check:
            for admin_id in firewall_mars.level_list_check('–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'):
                if admin_id == message.from_user.id:
                    logs.log_pass(us_id, '–ö–æ–º–∞–Ω–¥–∞', f'/command16')

                    client.send_message(message.chat.id,
                                        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∂—É—Ä–Ω–∞–ª, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç",
                                        parse_mode="html", protect_content=protect_content_check)

                    # –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∂—É—Ä–Ω–∞–ª –ª–æ–≥–æ–≤
                    log_analysis.main_log_analysis()
                    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                    client.send_document(message.chat.id,
                                         open(configs.log_analysis_filename, 'rb'),
                                         parse_mode="html", protect_content=protect_content_check)
                    # —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
                    os.system(f'del {configs.log_analysis_filename}')
                    return
            else:
                command_blocked(message, us_id, full_name_user, username)
                return
        else:
            blocks.access_blocked(message, us_id, full_name_user, username, client)
            return

    if '/command17' == message.text.lower():
        access_check = firewall_mars.access_check(message.from_user.id)
        if access_check:
            for admin_id in firewall_mars.level_list_check('–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'):
                if admin_id == message.from_user.id:
                    logs.log_pass(us_id, '–ö–æ–º–∞–Ω–¥–∞', f'/command17')
                    return

            else:
                command_blocked(message, us_id, full_name_user, username)
                return
        else:
            blocks.access_blocked(message, us_id, full_name_user, username, client)
            return

    calendar_search_list = ['/command18', '/calendar', 'üìÜ –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ä–∞–±–æ—Ç']
    for calendar_search_list_el in calendar_search_list:
        if calendar_search_list_el == message.text.lower():
            access_check = firewall_mars.access_check(message.from_user.id)
            if access_check:
                try:
                    logs.log_pass(us_id, '–ö–æ–º–∞–Ω–¥–∞', f'/calendar')
                    # —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è guid
                    global check_l_name
                    guid_1c, check_l_name = firewall_mars.id_in_guid(us_id)
                    # print("–¢–≤–æ–π guid: "+str(guid_1c))

                    if guid_1c == "":
                        client.send_message(message.chat.id,
                                            "<b>–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,</b>\n"
                                            " \n"
                                            "–•–æ—Ç–∏–º –ø—Ä–æ–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –æ —Ç–æ–º, —á—Ç–æ –Ω–∞ –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ –¥–æ—Å—Ç—É–ø–∞ "
                                            "<b>–∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω</b>. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–æ—Å—Ç—É–ø–∞ "
                                            "–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é –≤ —Ä–∞–º–∫–∞—Ö –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                                            " \n"
                                            "–ï—Å–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∑–Ω–∞—Ç—å –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                                            "–Ω–∞–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –ø–∏—Å—å–º–æ, "
                                            "–∏ –º—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é.\n"
                                            " \n"
                                            "<b>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n"
                                            "RFC Informer Bot</b>\n",
                                            protect_content=protect_content_check,
                                            parse_mode="html")
                        return
                    global calendar_build
                    client.send_message(message.chat.id,
                                        "–í—ã–ø–æ–ª–Ω—è—é –∑–∞–≥—Ä—É–∑–∫—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è, "
                                        "–æ–∂–∏–¥–∞–π—Ç–µ ‚è±",
                                        protect_content=protect_content_check)
                    calendar_build = calendars.calendar_rfc(guid_1c)
                    calendar, step = WMonthTelegramCalendar(calendar_id=us_id, locale="ru").build()

                    client.send_message(message.chat.id,
                                        "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –¥–∞—Ç—É, "
                                        "–¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è RFC.\n"
                                        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–∞–±–æ—Ç, –Ω–∞–∂–º–∏—Ç–µ "
                                        "/calendar_list", reply_markup=calendar,
                                        protect_content=protect_content_check)
                    return
                except (Exception,):
                    client.send_message(message.chat.id,
                                        "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏! –ü–æ–ø—Ä–æ–±—É–π /reset –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ",
                                        protect_content=protect_content_check)
                    return
            else:
                blocks.access_blocked(message, us_id, full_name_user, username, client)
                return

    if '/command19' == message.text.lower():
        access_check = firewall_mars.access_check(message.from_user.id)
        if access_check:
            for admin_id in firewall_mars.level_list_check('–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'):
                if admin_id == message.from_user.id:
                    logs.log_pass(us_id, '–ö–æ–º–∞–Ω–¥–∞', f'/command19')

                    markup = types.InlineKeyboardMarkup(row_width=1)
                    item1 = types.InlineKeyboardButton('–ù–∞–ø—Ä–∞–≤–∏—Ç—å',
                                                       callback_data='–Ω–∞–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
                    markup.add(item1)

                    client.send_message(message.chat.id,
                                        "–ù–∞–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ <b>–≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>?",
                                        parse_mode="html",
                                        reply_markup=markup, protect_content=protect_content_check)

                    return
            else:
                command_blocked(message, us_id, full_name_user, username)
                return
        else:
            blocks.access_blocked(message, us_id, full_name_user, username, client)
            return

    if '/cerberus' == message.text.lower():
        client.send_message(message.chat.id,
                            str(long_text.cerberus_command_description),
                            parse_mode="html",
                            protect_content=protect_content_check)
        return

    calendar_list = ['/command20', '/calendar_list', 'üìÜ —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç']
    for calendar_list_el in calendar_list:
        if calendar_list_el == message.text.lower():
            access_check = firewall_mars.access_check(message.from_user.id)
            if access_check:
                logs.log_pass(us_id, '–ö–æ–º–∞–Ω–¥–∞', f'/calendar_list')

                # —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è guid
                guid_1c, check_l_name = firewall_mars.id_in_guid(us_id)
                if guid_1c == "":
                    client.send_message(message.chat.id,
                                        "<b>–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,</b>\n"
                                        " \n"
                                        "–•–æ—Ç–∏–º –ø—Ä–æ–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –æ —Ç–æ–º, —á—Ç–æ –Ω–∞ –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ –¥–æ—Å—Ç—É–ø–∞ "
                                        "<b>–∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω</b>. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–æ—Å—Ç—É–ø–∞ "
                                        "–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é –≤ —Ä–∞–º–∫–∞—Ö –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                                        " \n"
                                        "–ï—Å–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∑–Ω–∞—Ç—å –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                                        "–Ω–∞–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –ø–∏—Å—å–º–æ, "
                                        "–∏ –º—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é.\n"
                                        " \n"
                                        "<b>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n"
                                        "RFC Informer Bot</b>\n",
                                        parse_mode="html",
                                        protect_content=protect_content_check)
                    return
                client.send_message(message.chat.id,
                                    "–í—ã–ø–æ–ª–Ω—è—é –∑–∞–≥—Ä—É–∑–∫—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è, "
                                    "–æ–∂–∏–¥–∞–π—Ç–µ ‚è±", protect_content=protect_content_check)
                calendar_build = calendars.calendar_rfc(guid_1c)

                if check_l_name:
                    client.send_message(message.chat.id,
                                        "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏! "
                                        "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö! "
                                        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ–±—ã—á–Ω—ã–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º",
                                        protect_content=protect_content_check)
                    return
                else:
                    try:
                        cursor.execute('SELECT grade_el FROM grade_el_table WHERE user_id = ' + str(us_id))
                        grade_el_table_zn = cursor.fetchone()[0]
                    except (Exception,):
                        grade_el_table_zn = "True"

                    # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                    try:
                        cursor.execute('SELECT calendar_view FROM calendar_table WHERE user_id = ' + str(us_id))
                        calendar_view = cursor.fetchone()[0]
                    except (Exception,):
                        calendar_view = "Full"
                    answer_cl_list, answer_list, work_not_check = calendars.list_week(
                        calendar_build,
                        grade_el_table_zn,
                        calendar_view)
                    # print(answer_cl_list)
                    button_name_array = []
                    for el_bn in answer_list:
                        bn_name = types.InlineKeyboardButton(
                            text=str(el_bn["numberRFC"]),
                            callback_data=str(el_bn["numberRFC"])
                        )
                        button_name_array.append(bn_name)

                    if len(button_name_array) > 5:
                        df = 3
                    else:
                        df = 2
                    keyboard = types.InlineKeyboardMarkup(row_width=df)

                    keyboard.add(*button_name_array)

                    client.send_message(message.chat.id,
                                        str(answer_cl_list),
                                        parse_mode="html",
                                        reply_markup=keyboard,
                                        protect_content=protect_content_check,
                                        link_preview_options=types.LinkPreviewOptions(is_disabled=True))

                    cursor.execute('SELECT advice FROM advice_rfc WHERE user_id = ' + str(us_id))
                    advice = cursor.fetchone()[0]
                    if advice == "advice on":
                        try:
                            cursor.execute('SELECT grade_el FROM grade_el_table WHERE user_id = ' + str(us_id))
                            grade_el_table_zn = cursor.fetchone()[0]
                        except (Exception,):
                            grade_el_table_zn = "True"

                        clue_answer_list = []
                        if grade_el_table_zn == "True":
                            if not work_not_check:
                                clue_answer = clues.clue_info("–û—Ü–µ–Ω–∫–∞ RFC")
                                clue_answer_list.append(clue_answer)
                        if work_not_check:
                            clue_answer = clues.clue_info('–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–∞–±–æ—Ç')
                            clue_answer_list.append(clue_answer)

                        clue_answer_full = ""
                        for clue_answer_el in clue_answer_list:
                            clue_answer_full = clue_answer_full + clue_answer_el + \
                                               " \n"
                        clue_answer_full = clue_answer_full + clues.clue_answer_clue
                        client.send_message(message.chat.id, str(clue_answer_full),
                                            parse_mode="html",
                                            protect_content=protect_content_check)
                    return
            else:
                blocks.access_blocked(message, us_id, full_name_user, username, client)
                return

    roadmap_list = ['/command23', '/roadmap']
    for roadmap_list_el in roadmap_list:
        if roadmap_list_el == message.text.lower():
            access_check = firewall_mars.access_check(message.from_user.id)
            if access_check:

                markup = types.InlineKeyboardMarkup(row_width=1)
                item1 = types.InlineKeyboardButton(text="üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é",
                                                   callback_data="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é")
                markup.add(item1)

                client.send_message(message.chat.id,
                                    "Roadmap –Ω–∞ <b>–≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n"
                                    " \n"
                                    f"–í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã: <b>{configs.version}</b> –æ—Ç <b>"
                                    f"{configs.data_version_update}</b> \n"
                                    "<a href='https://confluence.jet.su/pages/"
                                    "viewpage.action?pageId=162355252'>"
                                    "–°–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π –∏ –∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π RFC Informer Bot</a>\n"
                                    " \n"
                                    "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É \n"
                                    "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é",
                                    parse_mode="html", reply_markup=markup,
                                    protect_content=protect_content_check)
                return
            else:
                blocks.access_blocked(message, us_id, full_name_user, username, client)
                return
    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 23
    try:
        cursor.execute('SELECT search_rfc FROM rfc_number WHERE user_id = ' + str(us_id))
        search_rfc = cursor.fetchone()[0]
    except (Exception,):
        search_rfc = 0
    if search_rfc == 9:
        # print("—Ç–µ—Å—Ç")
        idea_message = message.text.lower()
        full_name_from_bd = firewall_mars.id_in_name(us_id)

        text_idea = f"<b>‚ö† –í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ–ª—É—á–µ–Ω–∞ –∏–¥–µ—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã</b>\n" \
                    f" \n" \
                    f"üßëüèº‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{full_name_from_bd}</b>\n" \
                    f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: <b>{idea_message}</b>\n"
        admins.admin_notification_message(client, text_idea)

        client.send_message(message.chat.id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å–∏—Å—Ç–µ–º—ã",
                            protect_content=protect_content_check)
        postgres_init.rfc_number(user_id=us_id, user_name=us_name, user_surname=us_surname, username=username,
                                 search_rfc=0, last_rfc_number="XXXX/202X")
        return

    if "/command26" in message.text.lower():
        access_check = firewall_mars.access_check(message.from_user.id)
        if access_check:
            config_line = message.text.lower()
            config_line_answer = settings_config.input_config_line(config_line, us_id, us_name, us_surname, username)
            if config_line_answer:
                client.send_message(message.chat.id,
                                    "‚úÖ –ö–æ–Ω—Ñ–∏–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω",
                                    parse_mode="html",
                                    protect_content=protect_content_check)
            else:
                client.send_message(message.chat.id,
                                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫. \n"
                                    "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã",
                                    parse_mode="html",
                                    protect_content=protect_content_check)
            return
        else:
            blocks.access_blocked(message, us_id, full_name_user, username, client)
            return

    menu_call = ['–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã', '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', "–º–µ–Ω—é", "menu", "/command08"]
    for menu_el in menu_call:
        if menu_el in message.text.lower():
            access_check = firewall_mars.access_check(message.from_user.id)
            if access_check:
                logs.log_pass(us_id, '–ö–æ–º–∞–Ω–¥–∞', f'/menu')

                markup = keyboards.menu_keyboard(us_id)

                client.send_chat_action(message.chat.id, action="typing")
                client.send_message(message.chat.id,
                                    "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n"
                                    " \n"
                                    "–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Å—Ç–∞—Ç—É—Å RFC, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã.\n"
                                    "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª.", reply_markup=markup,
                                    parse_mode="html",
                                    protect_content=protect_content_check)
                return
            else:
                blocks.access_blocked(message, us_id, full_name_user, username, client)
                return
    ################################################################################
    # –ù–ê–°–¢–†–û–ô–ö–ò#####################################################################
    ################################################################################
    settings_call = ['settings', '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
                     "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                     "/command09"]
    for settings_el in settings_call:
        if settings_el in message.text.lower():
            access_check = firewall_mars.access_check(message.from_user.id)
            if access_check:
                logs.log_pass(us_id, '–ö–æ–º–∞–Ω–¥–∞', f'/settings')

                client.send_chat_action(message.chat.id, action="typing")
                client.send_message(message.chat.id,
                                    "<b>–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫</b>\n"
                                    "–†–∞–∑–¥–µ–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å. "
                                    "–ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä —Å–∏—Å—Ç–µ–º—ã\n"
                                    " \n",
                                    parse_mode="html",
                                    reply_markup=keyboards.main_setting_keyboard(us_id),
                                    protect_content=protect_content_check)
                return
            else:
                blocks.access_blocked(message, us_id, full_name_user, username, client)
                return
    ################################################################################
    # –ò–ù–§–û–†–ú–ê–¶–ò–Ø
    ################################################################################
    info_call = ['info', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–≤–µ—Ä—Å–∏—è', '–∏–Ω—Ñ–æ', "/command10"]
    for info_el in info_call:
        if info_el in message.text.lower():
            access_check = firewall_mars.access_check(message.from_user.id)
            if access_check:
                logs.log_pass(us_id, '–ö–æ–º–∞–Ω–¥–∞', f'/info')

                cursor.execute(f'SELECT access FROM initialization_user WHERE user_id = {message.from_user.id}')
                access = cursor.fetchone()[0]

                unic_user = log_analysis.unic_user()
                answer_message_1 = "<b>–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n" + \
                                   "‚óè –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: <b>" + str(access) + "</b>\n" + \
                                   "‚óè –í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã: <b>" + str(configs.version) + "</b> –æ—Ç <b>" + \
                                   str(configs.data_version_update) + "</b> \n \n"

                answer_message_admin = "<b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n" + \
                                       "‚óè –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: <b>" + str(unic_user) + "</b>\n" + \
                                       " \n"

                answer_message_2 = "‚óè " + str(configs.link['–°–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π']) + "\n" + \
                                   " \n" + \
                                   "<b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:</b>\n" + \
                                   "‚óè " + str(configs.link['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±–æ—Ç']) + "\n" + \
                                   "‚óè " + str(configs.link['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è 1c']) + "\n" + \
                                   "‚óè " + str(configs.link["–ò–° '1–°'"]) + "\n" + \
                                   "‚óè " + str(configs.link['–°–ø–∏—Å–æ–∫ SRFC']) + "\n" + \
                                   " \n" + \
                                   "<b>RFC Informer Bot –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ " + \
                                   "—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ò–° '1C'</b>"
                if str(access) == "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫":
                    full_answer_message = answer_message_1 + \
                                          answer_message_admin + \
                                          answer_message_2
                else:
                    full_answer_message = answer_message_1 + answer_message_2

                # ------—Ä–∞–±–æ—Ç–∞–µ–º —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
                clue_answer_list = "HH,"

                clue, clue_body, clue_cod = clues.clue_bd("–î–æ—Å—Ç—É–ø–∞")
                clue_answer_list += clue_cod + ','

                clue, clue_body, clue_cod = clues.clue_bd(access)
                clue_answer_list += clue_cod + ','

                client.send_chat_action(message.chat.id, action="typing")
                client.send_message(message.chat.id, full_answer_message,
                                    parse_mode="html",
                                    reply_markup=keyboards.main_info_keyboard(us_id, clue_answer_list),
                                    protect_content=protect_content_check)
                return
            else:
                blocks.access_blocked(message, us_id, full_name_user, username, client)
                return

    # help –∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ö
    help_call = ["help", '–ø–æ–º–æ—â—å', "/command11"]
    for help_el in help_call:
        if help_el in message.text.lower():
            access_check = firewall_mars.access_check(message.from_user.id)
            if access_check:
                logs.log_pass(us_id, '–ö–æ–º–∞–Ω–¥–∞', f'/help')

                cursor.execute(f'SELECT access FROM initialization_user WHERE user_id = {message.from_user.id}')
                access = cursor.fetchone()[0]

                # print(access)
                command_list, check_status_command_list = commands.command_list(access)
                client.send_message(message.chat.id,
                                    f"{configs.link['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±–æ—Ç']}\n"
                                    " \n"
                                    "<b>‚óè –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã:</b>\n"
                                    f"{command_list}"
                                    " \n"
                                    f"‚óè –ü–æ—á—Ç–∞ –æ—Ç–¥–µ–ª–∞: <b>{configs.email_name}</b>\n"
                                    f"‚óè –ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–¥–µ–ª–∞: <b>{configs.workers['rfc_manager1']['–°—Å—ã–ª–∫–∞']}</b>,"
                                    f" <b>{configs.workers['rfc_manager2']['–°—Å—ã–ª–∫–∞']}</b>\n",
                                    parse_mode="html",
                                    protect_content=protect_content_check)

                # cursor, conn = postgres_init.postgres_init()

                cursor.execute(f'SELECT advice FROM advice_rfc WHERE user_id = {us_id}')
                advice = cursor.fetchone()[0]
                if advice == "advice on":
                    clue_answer_list = []

                    clue = "–î–æ—Å—Ç—É–ø–∞"
                    clue_answer = clues.clue_info(clue)
                    clue_answer_list.append(clue_answer)

                    if check_status_command_list:
                        clue_answer = clues.clue_info("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                        clue_answer_list.append(clue_answer)

                    clue_answer_full = ""
                    for clue_answer_el in clue_answer_list:
                        clue_answer_full = clue_answer_full + clue_answer_el + " \n"
                    clue_answer_full = clue_answer_full + clues.clue_answer_clue
                    client.send_message(message.chat.id, str(clue_answer_full),
                                        parse_mode="html", protect_content=protect_content_check)
                return
            else:
                blocks.access_blocked(message, us_id, full_name_user, username, client)
                return

    if '/cerberus' in message.text.lower():
        client.send_message(message.chat.id,
                            str(long_text.cerberus_command_description),
                            parse_mode="html",
                            protect_content=protect_content_check)
        return
    ################################################################################
    # –ü–û–ò–°–ö –ü–û –ü–†–û–ï–ö–¢–£##############################################################
    ################################################################################

    rfc_nb = message.text.lower()

    result_clear_5 = re.search(neuron.pattern_5_var1, rfc_nb)
    if result_clear_5 is not None:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∂–µ –≤ –∑–∞–ø—Ä–æ—Å–µ –Ω–æ–º–µ—Ä —Ä—Ñ—Å –∏–∑ 1—Å
        result_clear_1 = re.search(neuron.pattern_5_var2, rfc_nb)
        if result_clear_1 is not None:
            task = result_clear_1.group(0)
            rfc_search.search_rfc_main(client, task, message, us_id, us_name,
                                       us_surname, username, protect_content_check)
            return
        else:
            task = result_clear_5.group(0)
            naumen_search.naumen_creator_message(client, task, message, us_id,
                                                 us_name, us_surname, username, protect_content_check)
        return

    # –±–ª–æ–∫ –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —Ä—Ñ—Å
    status_rfc_call = ["—Å—Ç–∞—Ç—É—Å rfc", 'rfc_search', "/command12", "üîé –ø–æ–∏—Å–∫ rfc"]
    for status_rfc_el in status_rfc_call:
        if status_rfc_el in message.text.lower():
            access_check = firewall_mars.access_check(message.from_user.id)
            if access_check:
                logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫')
                client.send_chat_action(message.chat.id, action="typing")
                client.send_message(message.chat.id,
                                    "‚úè –î–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–ª—é—á–µ–π: \n"
                                    "‚óè –ù–æ–º–µ—Ä RFC –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>XXXX/202X</b>\n"
                                    "‚óè –ù–æ–º–µ—Ä SRFC –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>SRFCXXX</b>\n"
                                    "‚óè –ù–∞–∑–≤–∞–Ω–∏–µ RFC –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å\n"
                                    "‚óè –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞\n"
                                    "‚óè –ù–æ–º–µ—Ä Task –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>TASKXXXXXXXX</b>\n",
                                    parse_mode="html",
                                    protect_content=protect_content_check)
                postgres_init.rfc_number(user_id=us_id, user_name=us_name, user_surname=us_surname,
                                         username=username, search_rfc=1, last_rfc_number="XXXX/202X")
                return
            else:
                blocks.access_blocked(message, us_id, full_name_user, username, client)
                return

    # cursor, conn = postgres_init.postgres_init()

    try:
        cursor.execute('SELECT search_rfc FROM rfc_number WHERE user_id = ' + str(us_id))
        search_rfc = cursor.fetchone()[0]
    except (Exception,):
        search_rfc = 0
    if search_rfc == 1:
        rfc_nb = message.text.lower()
        if len(rfc_nb) >= 4:
            rfc_search.search_rfc_main(client, rfc_nb, message, us_id,
                                       us_name, us_surname, username, protect_content_check)
        else:
            client.send_chat_action(message.chat.id, action="typing")
            client.send_message(message.chat.id,
                                "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞! –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å!\n"
                                "–î–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª–µ–µ 4 —Å–∏–º–≤–æ–ª–æ–≤",
                                parse_mode="html",
                                protect_content=protect_content_check)
        return

    if '/command03' == message.text.lower():
        access_check = firewall_mars.access_check(message.from_user.id)
        if access_check:
            for admin_id in firewall_mars.level_list_check('–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'):
                if admin_id == message.from_user.id:
                    web_access_keyboard = keyboards.web_access_keyboard()
                    client.send_message(message.chat.id,
                                        '–î–æ–±—Ä—ã–π –¥–µ–Ω—å!\n'
                                        '\n'
                                        '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –≤ —Å–∏—Å—Ç–µ–º—É.\n'
                                        '–ü–µ—Ä–µ–¥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ—Å–µ—Ç–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é '
                                        '—Å–ø—Ä–∞–≤–∫—É –ø–æ —Ä–∞–±–æ—Ç–µ –∫–æ–º–∞–Ω–¥—ã',
                                        reply_markup=web_access_keyboard)
                    return
            else:
                command_blocked(message, us_id, full_name_user, username)
                return
        else:
            blocks.access_blocked(message, us_id, full_name_user, username, client)
            return

    if '/command27' in message.text.lower():
        access_check = firewall_mars.access_check(message.from_user.id)
        if access_check:
            for admin_id in firewall_mars.level_list_check('–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'):
                if admin_id == message.from_user.id:
                    web_search_1c = keyboards.web_search_1c_keyboard()
                    client.send_message(message.chat.id, '–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                                        reply_markup=web_search_1c,
                                        parse_mode='html')
                    return
            else:
                command_blocked(message, us_id, full_name_user, username)
                return
        else:
            blocks.access_blocked(message, us_id, full_name_user, username, client)
            return
    ################################################################################
    # –ü–û–ò–°–ö –ò–ù–§–û–†–ú–ê–¶–ò–ò –ë–ï–ó –ù–ê–ñ–ê–¢–ò–Ø –ö–ù–û–ü–û–ö###########################################
    ################################################################################
    access_check = firewall_mars.access_check(message.from_user.id)
    if access_check:
        rfc_nb = message.text.lower()

        result_clear_3 = re.search(neuron.pattern_3, rfc_nb)

        if result_clear_3 is not None:
            task = result_clear_3.group(0)
            rfc_search.search_rfc_main(client, task, message, us_id, us_name,
                                       us_surname, username, protect_content_check)
            return

        result_clear_1 = re.search(neuron.pattern_1, rfc_nb)

        if result_clear_1 is not None:
            task = result_clear_1.group(0)
            task = task.replace("\\", '/')
            task = task.replace('|', '/')
            task = task.replace('-', '/')
            task = task.replace('_', '/')
            client.reply_to(message, "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É RFC "
                                     "<b>" + str(task) + "</b>", parse_mode="html",
                            protect_content=protect_content_check)
            rfc_search.search_rfc_main(client, task, message, us_id, us_name,
                                       us_surname, username, protect_content_check)
            return

        result_clear_4 = re.search(neuron.pattern_4, rfc_nb)
        if result_clear_4 is not None:
            # print (result_clear_4)
            task = result_clear_4.group(0)
            # print (task)
            while len(task) < 9:
                task = "0" + task
            client.reply_to(message,
                            "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É RFC <b>" + str(task) + "</b>",
                            parse_mode="html",
                            protect_content=protect_content_check)
            rfc_search.search_rfc_main(client, task, message, us_id, us_name,
                                       us_surname, username, protect_content_check)
            return

        result_clear_2 = re.search(neuron.pattern_2, rfc_nb)
        if result_clear_2 is not None:
            task = result_clear_2.group(0)
            # print (task)
            now = datetime.now()

            if len(task) == 4:
                client.reply_to(message,
                                f"–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É "
                                f"RFC <b>{task}/{now.year}</b>", parse_mode="html",
                                protect_content=protect_content_check)
                task = str(task) + "/202"
                # client.setMessageReaction(message.chat.id, message_id=message, "üî•")
            elif len(task) == 8:
                client.reply_to(message, "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É "
                                         "<b>TASK" + str(task) + "</b>", parse_mode="html",
                                protect_content=protect_content_check)
                task = "TASK" + str(task)
            elif len(task) == 3:
                client.reply_to(message, "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É "
                                         "<b>SRFC" + str(task) + "</b>", parse_mode="html",
                                protect_content=protect_content_check)
                task = "SRFC" + str(task)
            elif len(task) == 5:
                client.reply_to(message, "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É "
                                         "<b>–ó–ù–ò: " + str(task) + "</b>", parse_mode="html",
                                protect_content=protect_content_check)
                naumen_search.naumen_creator_message(client, task, message, us_id,
                                                     us_name, us_surname, username, protect_content_check)
                return

            rfc_search.search_rfc_main(client, task, message, us_id, us_name,
                                       us_surname, username, protect_content_check)
            return
        markup = keyboards.menu_keyboard(us_id)

        reaction_type_not_answer = ["ü§∑‚Äç‚ôÇ", "ü§∑", "ü§∑‚Äç‚ôÄ"]
        client.set_message_reaction(message.chat.id, message_id=message.message_id,
                                    reaction=[types.ReactionTypeEmoji(random.choice(reaction_type_not_answer))],
                                    is_big=True
                                    )

        client.send_chat_action(message.chat.id, action="typing")
        client.send_message(message.chat.id,
                            "<b>–ù–µ —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–∏ –æ–¥–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π.</b>\n"
                            "–í–æ–∑–º–æ–∂–Ω–æ, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. ü§î\n"
                            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)", reply_markup=markup, parse_mode="html",
                            protect_content=protect_content_check)
        logs.log_pass(us_id, '–ö–æ–º–∞–Ω–¥–∞', f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - {message.text}')
        return
    else:
        blocks.access_blocked(message, us_id, full_name_user, username, client)
        return


@client.message_handler(content_types=['web_app_data'])
def web_app(message):
    us_id_admin = message.from_user.id
    # username_user = None
    full_name_admin = message.from_user.full_name
    res_data = json.loads(message.web_app_data.data)

    if '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞' in str(message.web_app_data.button_text):
        try:
            cursor_main.execute(f'SELECT username FROM initialization_user WHERE user_id = {res_data["id"]}')
            username_user = cursor_main.fetchone()[0]
        except (Exception,):
            username_user = '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'
        protect_content_check = protect_content.protect_content_check_fn(res_data["id"])
        if protect_content_check:
            p_content = '–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ'
        else:
            p_content = '–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ'

        postgres_init.initialization(user_id=res_data["id"], user_name=res_data["name"], username=username_user,
                                     department=res_data["department"], guid=res_data["guid"],
                                     access=res_data["access"])

        if str(res_data['p_content']).lower() == '–¥–∞':
            p_content_init = 0
        elif str(res_data['p_content']).lower() == "–Ω–µ—Ç":
            p_content_init = 1
        else:
            p_content_init = 1

        postgres_init.protect_content_fn(user_id=res_data["id"], protect_content_check=p_content_init)

        markup = keyboards.menu_keyboard(us_id_admin)
        client.send_message(message.chat.id,
                            f'–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –±–∞–∑—É\n'
                            f'\n'
                            f'–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{res_data["name"]}</code>\n'
                            f'Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{res_data["id"]}</code>\n'
                            f'–û—Ç–¥–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{res_data["department"]}</code>\n'
                            f'guid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{res_data["guid"]}</code>\n'
                            f'–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: <code>{res_data["access"]}</code>\n'
                            f'–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: <code>{p_content}</code>\n',
                            reply_markup=markup, parse_mode="html"
                            )
        logs.log_pass(us_id_admin, '–ö–æ–º–∞–Ω–¥–∞', f'/command03')

        try:
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton('‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ',
                                               callback_data='–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞')
            item2 = types.InlineKeyboardButton('üìù –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è',
                                               callback_data='–û–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º')
            item3 = types.InlineKeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±–æ—Ç',
                                               url="https://confluence.jet.su/pages/"
                                                   "viewpage.action?pageId=162355250")
            markup.add(item1, item2, item3)
            client.send_message(int(res_data["id"]),
                                "‚úÖ –î–æ—Å—Ç—É–ø –∫ RFC Informer bot, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω\n"
                                " \n"
                                f'–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: {res_data["access"]}\n'
                                " \n"
                                "üì≤ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –º–∞–Ω—É–∞–ª–æ–º",
                                parse_mode="html", reply_markup=markup,
                                protect_content=True)

            text_access_init = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{res_data["name"]}</b>, —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –µ–º—É –¥–æ—Å—Ç—É–ø–∞.\n' \
                               f" \n" \
                               f"–î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <b>{full_name_admin}</b>\n" \
                               f'–£—Ä–æ–≤–µ–Ω—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞: <b>{res_data["access"]}</b>\n'
            admins.admin_notification_message(client, text_access_init)
            return
        except (Exception,):
            client.send_message(message.chat.id,
                                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. \n"
                                " \n"
                                "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "
                                "<b>/command03 : id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
                                " \n"
                                "–ü—Ä. <i>/command03:78635896</i>",
                                parse_mode="html", protect_content=False)
        return

    if '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ' in str(message.web_app_data.button_text):
        hash_password = integrations.hash_password(res_data["password"])
        auth_1c_check = integrations.auth_1c_check(res_data["name"], hash_password)

        us_id_reg = message.from_user.id
        username = message.from_user.username

        if auth_1c_check == 'True':
            client.send_message(message.chat.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ò–° 1–° —É—Å–ø–µ—à–Ω–∞',
                                reply_markup=keyboards.menu_keyboard(us_id_reg),
                                protect_content=True
                                )

            postgres_init.initialization(user_id=us_id_admin, user_name=res_data["name"], username=username,
                                         department='', guid='', access="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            postgres_init.protect_content_fn(user_id=us_id_admin, protect_content_check=0)

            notification = f'‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n' \
                           f' \n' \
                           f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{res_data["name"]}</code>\n' \
                           f'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{us_id_reg}</code>\n'

            hash_object = hashlib.sha1(res_data["password"].encode('utf-8'))
            hash_password = hash_object.hexdigest()

            last_data = str(datetime.now().date())

            postgres_init.authentication_1c(us_id_reg, res_data["name"], hash_password, 1, last_data)

            admins.admin_notification_message(client, notification)
            logs.log_pass(us_id_reg, '–î–µ–π—Å—Ç–≤–∏–µ', f'–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
            return
        elif auth_1c_check == 'False':
            client.send_message(message.chat.id,
                                '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ò–° 1–° –Ω–µ —É—Å–ø–µ—à–Ω–∞. \n'
                                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.\n'
                                '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–§–∞–º–∏–ª–∏—è –ò–º—è", –Ω–∞ –†—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ\n'
                                '–ù–∞–ø—Ä–∏–º–µ—Ä: –°–∏–¥–æ—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π'
                                )

            # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            blocks.access_blocked(message, us_id_reg, res_data["name"], username, client)
            return

    if '–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ' in str(message.web_app_data.button_text):
        id_user_search = res_data["id"]
        id_user_search = int(id_user_search)
        try:
            cursor_main.execute(f'SELECT * FROM initialization_user WHERE user_id = {id_user_search}')
            init_user_list = cursor_main.fetchall()[0]
            protect_content_check = protect_content.protect_content_check_fn(id_user_search)
            if protect_content_check:
                p_content = '–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ'
            else:
                p_content = '–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ'

            client.send_message(message.chat.id,
                                f'–î–æ—Å—Ç—É–ø–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ,\n'
                                f'\n'
                                f'–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{init_user_list[1]}</code>\n'
                                f'–ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{init_user_list[2]}</code>\n'
                                f'Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{init_user_list[0]}</code>\n'
                                f'–û—Ç–¥–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{init_user_list[3]}</code>\n'
                                f'guid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{init_user_list[4]}</code>\n'
                                f'–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: <code>{init_user_list[5]}</code>\n'
                                f'–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: <code>{p_content}</code>\n',
                                parse_mode="html")
        except(Exception,):
            client.send_message(us_id_admin,
                                '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞! –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
            return


# –ö–û–õ–õ–ë–ï–ö–ò--------------------------------------------------------------------------------------------------------------
@client.callback_query_handler(func=lambda message: True)
def call_init(call):
    callbacks.callback_main_bot(call, client, calendar_build, check_l_name)


def debug_mode(debug_mode_lan):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞. –í —Ç–µ—Å—Ç–æ–≤–æ–º –∏–ª–∏ –ø—Ä–æ–¥ —Ä–µ–∂–∏–º–µ.
    –í —Å–æ—Å—Ç–æ—è–Ω–∏–∏ debug_mode_lan = False, –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¥–ª—è –æ—à–∏–±–æ–∫
    –í —Å–æ—Å—Ç–æ—è–Ω–∏–∏ debug_mode_lan = True, –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.
    –ó–∞–ø—É—Å–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –±—ã—Å—Ç—Ä–µ–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
    :param debug_mode_lan: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
    :return: –ü—Ä–æ—Ü–µ–¥—É—Ä–∞
    """
    if not debug_mode_lan:
        # –∑–∞–ø—É—Å–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏
        servers.start_server()
        while True:
            try:
                client.polling(none_stop=True, interval=0, timeout=123)
                schedule.run_pending()
                time.sleep(1)
            except BaseException as e:
                install(show_locals=True)
                errors.error_bot(e, 77777777, protect_content, client)
                client.stop_polling()
                time.sleep(3)
    else:
        client.polling(none_stop=True, interval=0, timeout=123)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫-----------------------------------------------------------------------------------------------------
# debug_mode_lan=True, –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
debug_mode(debug_mode_lan=True)
