# -*- coding: utf-8 -*-
# ----------------------------------------------------------------------------------------------------------------------

import time
import types
import os.path
import requests
import json
import base64
import os.path
from datetime import datetime

# ----------------------------------------------------------------------------------------------------------------------

import re
from telebot import types
from telegram_bot_calendar import DetailedTelegramCalendar

# ----------------------------------------------------------------------------------------------------------------------

import configs                         # —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–∞, –∫–ª—é—á–µ–π –∏ –ø–∞—Ä–æ–ª–µ–π
import calendars                       # —Ä–∞–±–æ—Ç–∞ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
import rfc_statistic                   # –≤–µ–± —Å–µ—Ä–≤–∏—Å —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–∞–±–æ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–Ω–æ
import settings_config                 # –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥–æ–º —Å–∏—Å—Ç–µ–º—ã
import clues                           # –±–ª–æ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º –ø–æ–¥—Å–∫–∞–∑–æ–∫
import postgres_init                   # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥\
import search_rfc_main_short           # –∫—Ä–∞—Ç–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ rfc
import naumen_search                   # –º–æ–¥—É–ª—å –ø–æ–∏—Å–∫–∞ –≤ –±–∞–Ω–∫–µ
import logs                            # –º–æ–¥—É–ª—å –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞
import protect_content                 # –º–æ–¥—É–ª—å –∑–∞—â–∏—Ç—ã –æ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
import keyboards                       # –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
import admins                          # –±–ª–æ–∫ —Ä–∞–±–æ—Ç—ã —Å –∞–¥–º–∏–Ω–∞–º–∏
import errors                          # –±–ª–æ–∫ —Ä–∞–±–æ—Ç—ã —Å –æ—à–∏–±–∫–æ–π
import rfc_search                      # –º–æ–¥—É–ª—å –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ rfc
import neuron                          # –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
import long_text                       # –º–æ–¥—É–ª—å –≥–¥–µ —Ö—Ä–∞–Ω–∏–º –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–∞
import file_processing

# ----------------------------------------------------------------------------------------------------------------------


def callback_main_bot(call, client, calendar_build, check_l_name):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤ —Ç–∏–ø–∞ callback, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–µ—Ç
    telegram –±–æ—Ç.
    :param call: Json –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ callback, —Å–æ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π —á—Ç–æ –ø–µ—Ä–µ–¥–∞—é—Ç —Å–µ—Ä–≤–µ—Ä–∞ telegram.
    :param client: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º.
    :param calendar_build: –ú–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–π –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –∏–∑ 1–° –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
    :param check_l_name: Boolean –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç
    :return: –ø—Ä–æ—Ü–µ–¥—É—Ä–∞
    """
    cursor, conn = postgres_init.postgres_init()

    us_id = call.from_user.id
    us_name = call.from_user.first_name
    us_surname = call.from_user.last_name
    username = call.from_user.username
    full_name_user = call.from_user.full_name

    protect_content_check = protect_content.protect_content_check_fn(us_id)

    if '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ 1c' in call.data:
        # –ø—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –ª–∏—Å—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
        agreements_body = None
        agreement = str(call.data)
        agreements_list = agreement.split()
        number_rfc = agreements_list[2]
        rfc_short_json = search_rfc_main_short.search_rfc_main_short(number_rfc)
        number_rfc = str(rfc_short_json["–ù–æ–º–µ—ÄRFC"])
        name_rfc = rfc_short_json["–ù–∞–∑–≤–∞–Ω–∏–µ"]
        agreements_from_1c = rfc_short_json["–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è"]

        if not agreements_from_1c:
            agreements_body = "‚óè –ò—Å—Ç–æ—Ä–∏—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è RFC –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        if agreements_from_1c is not None:
            agreements_body = ""
            for s in agreements_from_1c:
                if str(s['–°–æ–≥–ª–∞—Å—É—é—â–∏–π']) == '':
                    s['–°–æ–≥–ª–∞—Å—É—é—â–∏–π'] = '–ò–° 1–°'

                name_list = str(s['–°–æ–≥–ª–∞—Å—É—é—â–∏–π']).split(' ')
                name_agreements = str(name_list[0]) + ' ' + str(name_list[1])

                sm_color = ''

                if str(s['–†–µ–∑—É–ª—å—Ç–∞—Ç']) == '':
                    s['–†–µ–∑—É–ª—å—Ç–∞—Ç'] = '–°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞'  # ‚ö™Ô∏è
                    sm_color = 'Ô∏è‚ö™Ô∏è '
                if str(s['–†–µ–∑—É–ª—å—Ç–∞—Ç']) == '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ':
                    s['–†–µ–∑—É–ª—å—Ç–∞—Ç'] = '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ'  # üü¢
                    sm_color = 'üü¢ '
                if str(s['–†–µ–∑—É–ª—å—Ç–∞—Ç']) == '–ù–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ':
                    s['–†–µ–∑—É–ª—å—Ç–∞—Ç'] = '–ù–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ'  # üî¥
                    sm_color = 'Ô∏èüî¥ '
                if str(s['–†–µ–∑—É–ª—å—Ç–∞—Ç']) == '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ —Å –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏':
                    s['–†–µ–∑—É–ª—å—Ç–∞—Ç'] = '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ —Å –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏'  # üü°
                    sm_color = 'Ô∏èüü° '

                if str(s['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']) != '':
                    s['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'] = '- ' + str(s['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'])
                if str(s['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']) == '':
                    s['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'] = '- –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ'

                agreements_body += "‚óè <b>" + str(name_agreements) + "</b> " + \
                                   "(" + str(s['–ü–µ—Ä–∏–æ–¥'][:-3]) + ")\n" + \
                                   str(sm_color) + "<b>" + str(s['–†–µ–∑—É–ª—å—Ç–∞—Ç']) + "</b> " + \
                                   "<code>" + str(s['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']) + "</code>\n \n"

        answer_agreement = "–ò—Å—Ç–æ—Ä–∏—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è RFC \n" + \
                           "<b>" + str(number_rfc) + " - " + str(name_rfc) + "</b>\n" + \
                           " \n" + str(agreements_body)

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
        if len(answer_agreement) > 4096:
            for x in range(0, len(answer_agreement), 4096):
                client.send_chat_action(call.message.chat.id, action="typing")
                client.send_message(call.message.chat.id,
                                    str(answer_agreement[x:x + 4096]),
                                    parse_mode="html",
                                    protect_content=protect_content_check,
                                    link_preview_options=types.LinkPreviewOptions(is_disabled=True))
        else:
            client.send_chat_action(call.message.chat.id, action="typing")
            client.send_message(call.message.chat.id, answer_agreement,
                                parse_mode="html",
                                protect_content=protect_content_check,
                                link_preview_options=types.LinkPreviewOptions(is_disabled=True))

        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–ò–∑ –ò–° "1–°" –ø–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è {number_rfc}')
        return

    if '–°–∫–∞—á–∞—Ç—å –ø–ª–∞–Ω' in call.data:
        # global word_file
        # if word_file is None:
        #     old_request()
        #     return

        # agreements_body = None
        word_file_body = str(call.data)
        word_file_body_list = word_file_body.split()
        number_rfc = word_file_body_list[2]
        rfc_short_json = search_rfc_main_short.search_rfc_main_short(number_rfc)
        # speaking = rfc_info["–û–±—Å—É–∂–¥–µ–Ω–∏—è"]
        # vlogs = rfc_info["–í–ª–æ–∂–µ–Ω–∏—è"]
        # usl_work = rfc_info["–£—Å–ª–æ–≤–∏—è–ü—Ä–æ–≤–µ–¥–µ–Ω–∏—è–†–∞–±–æ—Ç"]
        st_rfc_1c = str(rfc_short_json["–°—Ç–∞—Ç—É—Å"])
        # uuid = str(rfc_info["–£–ò–î_–ó–ù–ò"])
        # number_rfc = str(rfc_info["–ù–æ–º–µ—ÄRFC"])
        # number_rfc_bank = rfc_info["–ù–æ–º–µ—Ä–ë–∞–Ω–∫–∞"]
        name_rfc = str(rfc_short_json["–ù–∞–∑–≤–∞–Ω–∏–µ"])
        # word_file = str(rfc_info["–§–∞–π–ªWord"])
        # agreements = rfc_info["–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è"]
        word_file_document = rfc_short_json["–§–∞–π–ªWord"]

        # client.send_chat_action(call.message.chat.id, action = "typing")
        # client.send_message(call.message.chat.id, "–§–æ—Ä–º–∏—Ä—É—é –ø–ª–∞–Ω, –æ–∂–∏–¥–∞–π—Ç–µ",
        # parse_mode="html", protect_content=protect_content_check)
        decoded = base64.b64decode(word_file_document)

        file_word_name = str(number_rfc) + " - " + str(name_rfc) + ".docx"
        file_word_name = file_word_name.replace("<", "_")
        file_word_name = file_word_name.replace(">", "_")
        file_word_name = file_word_name.replace(":", "_")
        file_word_name = file_word_name.replace('"', "_")
        file_word_name = file_word_name.replace("/", "_")
        file_word_name = file_word_name.replace('\n', '')
        file_word_name = file_word_name.replace('\r', '')
        file_word_name = file_word_name.replace('\r\n', '')
        file_word_name = file_word_name.replace('\\', '_')
        # file_word_name = file_word_name.replace('''\n''', '_')
        file_word_name = file_word_name.replace("|", "_")
        file_word_name = file_word_name.replace("?", "_")
        file_word_name = file_word_name.replace("*", "_")
        file_word_name = file_word_name.replace(",", " ")
        file_word_name = file_processing.sanitize_filename(file_word_name)
        file_word_name = r'files\\' + str(file_word_name)

        image_result = open(str(file_word_name), 'wb')
        # —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø–∏—Å–∏, –∏ –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        # –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        image_result.write(decoded)
        # –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ –¥–æ–∫—É
        if str(st_rfc_1c) == "–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ":
            client.send_document(call.message.chat.id,
                                 open(str(file_word_name), "rb"),
                                 caption="RFC –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –±–∞–Ω–∫, –¥–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–±–æ—Ç "
                                         "<b>–º–æ–∂–µ—Ç –±—ã—Ç—å</b> –Ω–µ —Ç–æ—á–Ω—ã–π",
                                 parse_mode="html")
        else:
            client.send_document(call.message.chat.id, open(str(file_word_name), "rb"))

        image_result.close()
        os.remove(str(file_word_name))

        # full_user_name = firewall_mars.id_in_name(us_id)
        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–ò–∑ –ò–° "1–°" —Å–∫–∞—á–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {file_word_name}')

        # word_file = None
        # –º–µ–Ω—é –ø–æ–¥—Å–∫–∞–∑–∫–∏
        cursor.execute('SELECT advice FROM advice_rfc WHERE user_id = ' + str(us_id))
        advice = cursor.fetchone()[0]
        if advice == "advice on":
            clue_answer_check = False
            clue_answer_list = []

            if str(st_rfc_1c) == "–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ":
                clue_answer_check = True
                clue_answer = clues.clue_info("–ü–ª–∞–Ω —Ä–∞–±–æ—Ç 1C/Naumen")
                clue_answer_list.append(clue_answer)

            clue_answer_full = ""
            for clue_answer_el in clue_answer_list:
                clue_answer_full = clue_answer_full + clue_answer_el + " \n"
            clue_answer_full = clue_answer_full + clues.clue_answer_clue

            if clue_answer_check:
                client.send_message(call.message.chat.id,
                                    str(clue_answer_full),
                                    parse_mode="html",
                                    protect_content=protect_content_check)
        # uuid = None
        return
    if '–í–ª–æ–∂–µ–Ω–∏—è' in call.data:
        vlogs = str(call.data)
        vlogs_list = vlogs.split()
        number_rfc = vlogs_list[1]
        rfc_short_json = search_rfc_main_short.search_rfc_main_short(number_rfc)
        # speaking = rfc_info["–û–±—Å—É–∂–¥–µ–Ω–∏—è"]
        # vlogs = rfc_info["–í–ª–æ–∂–µ–Ω–∏—è"]
        # usl_work = rfc_info["–£—Å–ª–æ–≤–∏—è–ü—Ä–æ–≤–µ–¥–µ–Ω–∏—è–†–∞–±–æ—Ç"]
        # st_rfc_1c = str(rfc_info["–°—Ç–∞—Ç—É—Å"])
        # uuid = str(rfc_info["–£–ò–î_–ó–ù–ò"])
        # number_rfc = str(rfc_info["–ù–æ–º–µ—ÄRFC"])
        # number_rfc_bank = rfc_info["–ù–æ–º–µ—Ä–ë–∞–Ω–∫–∞"]
        # name_rfc = str(rfc_info["–ù–∞–∑–≤–∞–Ω–∏–µ"])
        # word_file = str(rfc_info["–§–∞–π–ªWord"])
        # agreements = rfc_info["–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è"]
        vlogs = rfc_short_json["–í–ª–æ–∂–µ–Ω–∏—è"]
        number_rfc = rfc_short_json["–ù–æ–º–µ—ÄRFC"]
        name_rfc = rfc_short_json["–ù–∞–∑–≤–∞–Ω–∏–µ"]
        client.send_message(call.message.chat.id,
                            "–£ RFC <b>" + str(number_rfc) + " - " + str(name_rfc) + "</b> " +
                            "–Ω–∞–π–¥–µ–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–π: " + str(len(vlogs)),
                            parse_mode="html",
                            protect_content=protect_content_check)
        for vg in vlogs:
            try:
                decoded = base64.b64decode(vg["Base64"])
                file_vlog_name = r'files\\' + str(vg["–ù–∞–∑–≤–∞–Ω–∏–µ"])
                image_result = open(file_vlog_name, 'wb')
                # —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø–∏—Å–∏, –∏ –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                # –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                image_result.write(decoded)
                image_result.close()
                client.send_document(call.message.chat.id, open(file_vlog_name), "rb")

                os.remove(file_vlog_name)
            except Exception as er:
                client.send_message(call.message.chat.id,
                                    "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: " + str(vg["–ù–∞–∑–≤–∞–Ω–∏–µ"]) + "\n"
                                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å–∏—Å—Ç–µ–º—ã –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ.\n"
                                    "(–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—à–∏–±–∫–µ –º—ã —É–≤–µ–¥–æ–º–∏–ª–∏)",
                                    parse_mode="html",
                                    protect_content=protect_content_check
                                    )
                text_error_vlogs = f'<b>‚ö† –í–Ω–∏–º–∞–Ω–∏–µ! ' \
                                   f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –≤—ã–¥–∞—á–µ –≤–ª–æ–∂–µ–Ω–∏—è!</b>\n' \
                                   f' \n' \
                                   f'üßëüèº‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{full_name_user}</b>\n' \
                                   f'‚≠ïÔ∏è –ó–∞–ø—Ä–æ—Å: <b>{number_rfc}</b>\n' \
                                   f'‚ùå –ò–º—è —Å–±–æ–π–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: <b>{vg["–ù–∞–∑–≤–∞–Ω–∏–µ"]}</b>\n'
                admins.admin_notification_message(client, text_error_vlogs)
                errors.error_bot(er, us_id, protect_content, client)
        return

    if '–∫–æ–Ω—Ç–∞–∫—Ç—ã' in call.data:
        contact = str(call.data)
        contact_list = contact.split()
        number_rfc = contact_list[1]
        rfc_short_json = search_rfc_main_short.search_rfc_main_short(number_rfc)
        contact_user = rfc_short_json["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏"]
        check_contact_send = False
        for el in contact_user:
            if el['–¢–µ–ª–µ—Ñ–æ–Ω'] != '':
                client.send_contact(call.message.chat.id,
                                    phone_number=el['–¢–µ–ª–µ—Ñ–æ–Ω'],
                                    first_name=el['–§–ò–û']
                                    )
                check_contact_send = True
                if el['–ü–æ—á—Ç–∞'] != '':
                    client.send_message(call.message.chat.id,
                                        f"{el['–§–ò–û']}:\n"
                                        f"<code>{el['–ü–æ—á—Ç–∞']}</code>\n"
                                        f"<code>{el['–¢–µ–ª–µ—Ñ–æ–Ω']}</code>",
                                        parse_mode="html")
        if not check_contact_send:
            client.send_message(call.message.chat.id, '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
        return

    if '–ü–ª–∞–Ω —Ä–∞–±–æ—Ç Naumen' in call.data:
        # if naumen_load is None:
        #     old_request()
        #     return
        naumen_file_body = str(call.data)
        naumen_file_body_list = naumen_file_body.split()
        uuid_1c = naumen_file_body_list[3]
        naumen_load, code_check = naumen_search.naumen_search(uuid_1c)
        file_list_naumen = naumen_load["ContentFiles"]

        # –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ó–ù–ò
        def download_file_base64(uuid_file):
            # print(str(uuid_file))
            url_file = f"{configs.naumen['link']}/sd/services/rest/exec?" + \
                       "accessKey=" + str(configs.naumen['accessKey']) + \
                       "&func=modules.sdRest.getFile&params=" + str(uuid_file) + ",user"
            payload_file = {}
            headers_file = {
                'Cookie': configs.naumen['cookie'],
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
            }

            response = requests.request("GET", url_file, headers=headers_file,
                                        data=payload_file)
            # print (response.text)
            response_json = json.loads(response.text)

            return response_json["content"]

        if len(file_list_naumen) > 1:
            client.send_message(call.message.chat.id,
                                "‚óè –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: " + str(len(file_list_naumen)) + ", –∑–∞–≥—Ä—É–∂–∞—é.",
                                parse_mode="html", protect_content=protect_content_check)
        time.sleep(1)
        full_name_file = ""
        for i in file_list_naumen:
            # print("–ü–µ—Ä–≤—ã–π —Ñ–∞–π–ª : "+str(i))
            name_naumen_file = i['title']

            name_naumen_file = name_naumen_file.replace("\\", "")
            name_naumen_file = name_naumen_file.replace("\n", "")
            name_naumen_file = name_naumen_file.replace("\r", "")
            name_naumen_file = name_naumen_file.replace("\r\n", "")
            name_naumen_file = file_processing.sanitize_filename(name_naumen_file)

            full_name_file += name_naumen_file + ", "
            name_naumen_file = r'files\\' + str(name_naumen_file)
            # print("–ò–º—è: "+str(i['title']))
            file_id = i['UUID']
            # print("–∫–æ–¥ —Ñ–∞–π–ª–∞: "+str(i['UUID']))
            file_id = file_id.replace("file$", "")
            tr = download_file_base64(file_id)
            decoded = base64.b64decode(tr)
            with open(name_naumen_file, "wb") as file:
                file.write(decoded)
                client.send_document(call.message.chat.id, open(str(name_naumen_file), "rb"))
            os.remove(str(name_naumen_file))

        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–ò–∑ Naumen —Å–∫–∞—á–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {full_name_file}')
        return

    if '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ Naumen' in call.data:

        naumen_expert_body = str(call.data)
        naumen_expert_body_list = naumen_expert_body.split()
        uuid_naumen = naumen_expert_body_list[2]
        naumen_load, code_check = naumen_search.naumen_search(uuid_naumen)

        # full_user_name = firewall_mars.id_in_name(us_id)
        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ',
                      f'–ò–∑ Naumen –ø–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è {naumen_load["title"]}')

        def tasks_exec():
            str_exec = ""

            def status_task_expert(task_expert_st_input):
                # task_expert_st_input = None
                if task_expert_st == "closed":
                    task_expert_st_input = "‚ö´Ô∏è –ó–∞–∫—Ä—ã—Ç"
                if task_expert_st == "inprogress":
                    task_expert_st_input = "üü¢ –í —Ä–∞–±–æ—Ç–µ"
                if task_expert_st == "registered":
                    task_expert_st_input = "üü¢ –ù–∞–∑–Ω–∞—á–µ–Ω–æ"
                if task_expert_st == "accepted":
                    task_expert_st_input = "üü¢ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ"
                return task_expert_st_input

            for el in naumen_load["tasksExec"]:
                # print(str(i["UUID"]))
                url_task = f"{configs.naumen['link']}/sd/services/rest/get/" + \
                           str(el['UUID']) + "?accessKey=" + str(configs.naumen['accessKey'])
                payload_task = {}
                headers_task = {
                    'Cookie': configs.naumen['cookie'],
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
                }
                response = requests.request("GET", url_task, headers=headers_task, data=payload_task)
                # response.encoding = "utf-8"
                task_expert = response.json()
                # print(task_expert)
                expert_list = task_expert['respEmplFlex']

                if expert_list is not None:
                    # –∑–∞–º–µ–Ω—è–µ–º —Ç–∞—Å–∫–∏
                    task_expert_st = str(task_expert['state'])
                    new_status_task_expert = status_task_expert(task_expert_st)
                    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
                    if task_expert['solution'] is not None:
                        description_solution = " - " + str(task_expert['solution'])
                        description_solution = description_solution.replace('</div>', "")
                        description_solution = description_solution.replace('<div>', "")
                        description_solution = description_solution.replace('&nbsp;', " ")
                        description_solution = re.sub(r'<[^>]*>', '', description_solution)
                    else:
                        description_solution = ""
                    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    str_exec += '‚óè ' + str(task_expert["respEmplFlex"]["title"]) + '\n' + \
                                '<code><b>' + str(new_status_task_expert) + '</b>' + str(
                        description_solution) + '</code>\n \n'
            return str_exec

        # —Å–ø–∏—Å–æ–∫ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
        if naumen_load['experts'] is not None:
            info_approvers_list = "<b>‚ûñ –ó–∞–¥–∞—á–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞–º: </b>\n"
            info_exec_list = tasks_exec()
            if info_exec_list == "":
                info_exec_list = ""
            else:
                info_exec_list = info_approvers_list + info_exec_list + " \n"
        else:
            info_exec_list = ""

        # —Å–ø–∏—Å–æ–∫ —Å–æ–≥–ª–∞—Å—É—é—â–∏—Ö
        task_n = naumen_load['negotTask']
        if task_n is not None:
            url = f"{configs.naumen['link']}/sd/services/rest/get/" + \
                  str(task_n['UUID']) + "?accessKey=" + str(configs.naumen['accessKey'])
            payload = {}
            headers = {
                'Cookie': configs.naumen['cookie'],
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
            }
            response2 = requests.request("GET", url, headers=headers,
                                         data=payload)
            t2 = response2.json()
            info_approvers_list = "<b>‚ûñ –°–ø–∏—Å–æ–∫ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è:</b>\n"
            y = 0
            for i in t2["partFormResol"]:
                # print(i)
                url = f"{configs.naumen['link']}/sd/services/rest/get/" + \
                      str(t2["voteLinksTpl"][y]["UUID"]) + \
                      "?accessKey=" + str(configs.naumen['accessKey'])
                payload = {}
                headers = {
                    'Cookie': configs.naumen['cookie'],
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
                }
                response3 = requests.request("GET", url, headers=headers,
                                             data=payload)
                t3 = response3.json()
                # print(t3)
                description = re.sub(r'<[^>]*>', '', t3["description"])
                # –¥–µ–ª–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∏–∫–æ–Ω–∫—É –∏ –∫—Ä—É–∂–æ–∫
                status_system_icon = str(t3["system_icon"]["title"])
                # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
                status_time = str(t3["stateStartTime"])
                status_time = datetime.strptime(str(status_time), '%Y.%m.%d %H:%M:%S')
                status_time = status_time.strftime("%H:%M %d.%m.%Y")

                if status_system_icon == "–û—Ç–∫–∞–∑–∞–Ω–æ":
                    status_system_icon = "üî¥ –û—Ç–∫–∞–∑–∞–Ω–æ"
                if status_system_icon == "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ":
                    status_system_icon = "üü¢ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ"
                # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                info_approvers_list += "‚óè " + str(t3["author"]["title"]) + \
                                       " <b>(" + str(status_time) + ")</b>\n" + \
                                       "<code><b>" + str(status_system_icon) + "</b> - " + \
                                       str(description) + "</code>\n \n"
                y += 1

            for i_el in t2["participants"]:
                info_approvers_list += "‚óè " + str(i_el["title"]) + "\n" + \
                                       "<code><b>üü° –û–∂–∏–¥–∞–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è</b></code>\n \n"
        else:
            info_approvers_list = ""

        # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
        full_answer_bank = info_exec_list + info_approvers_list
        if full_answer_bank == "":
            full_answer_bank = "<b>‚ùé –°–ø–∏—Å–æ–∫ —Å–æ–≥–ª–∞—Å—É—é—â–∏—Ö –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω</b>"

        answer_text_rfc_status = "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ: <b>" + str(naumen_load["title"]) + "</b> \n" + \
                                 " \n" + str(full_answer_bank)

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
        if len(answer_text_rfc_status) > 4096:
            for x in range(0, len(answer_text_rfc_status), 4096):
                client.send_chat_action(call.message.chat.id, action="typing")
                client.send_message(call.message.chat.id,
                                    str(answer_text_rfc_status[x:x + 4096]),
                                    parse_mode="html",
                                    protect_content=protect_content_check,
                                    link_preview_options=types.LinkPreviewOptions(is_disabled=True))
        else:
            client.send_chat_action(call.message.chat.id, action="typing")
            client.send_message(call.message.chat.id, str(answer_text_rfc_status),
                                parse_mode="html",
                                protect_content=protect_content_check,
                                link_preview_options=types.LinkPreviewOptions(is_disabled=True))
        return

    if '–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç' in call.data:
        usl_works = str(call.data)
        usl_works_list = usl_works.split()
        number_rfc = usl_works_list[2]
        rfc_short_json = search_rfc_main_short.search_rfc_main_short(number_rfc)
        # speaking = rfc_info["–û–±—Å—É–∂–¥–µ–Ω–∏—è"]
        # vlogs = rfc_info["–í–ª–æ–∂–µ–Ω–∏—è"]
        usl_work = rfc_short_json["–£—Å–ª–æ–≤–∏—è–ü—Ä–æ–≤–µ–¥–µ–Ω–∏—è–†–∞–±–æ—Ç"]
        # st_rfc_1c = str(rfc_info["–°—Ç–∞—Ç—É—Å"])
        # uuid = str(rfc_info["–£–ò–î_–ó–ù–ò"])
        # number_rfc = str(rfc_info["–ù–æ–º–µ—ÄRFC"])
        # number_rfc_bank = rfc_info["–ù–æ–º–µ—Ä–ë–∞–Ω–∫–∞"]
        # name_rfc = str(rfc_info["–ù–∞–∑–≤–∞–Ω–∏–µ"])
        # word_file = str(rfc_info["–§–∞–π–ªWord"])
        # agreements = rfc_info["–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è"]
        # vlogs = rfc_short_json["–í–ª–æ–∂–µ–Ω–∏—è"]
        number_rfc = rfc_short_json["–ù–æ–º–µ—ÄRFC"]
        name_rfc = rfc_short_json["–ù–∞–∑–≤–∞–Ω–∏–µ"]

        # full_user_name = firewall_mars.id_in_name(us_id)
        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–ó–∞–ø—Ä–æ—à–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç {number_rfc}')

        full_usl_work = "–£—Å–ª–æ–≤–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç " + \
                        "<b>" + str(number_rfc) + " - " + str(name_rfc) + "</b>\n" + \
                        " \n" + \
                        f'‚óè <code>{usl_work}</code>'

        client.send_message(call.message.chat.id,
                            str(full_usl_work),
                            parse_mode="html", protect_content=protect_content_check)
        return

    if '–û–±—Å—É–∂–¥–µ–Ω–∏–µ' in call.data:

        speaking = str(call.data)
        speaking_list = speaking.split()
        number_rfc = speaking_list[1]
        rfc_short_json = search_rfc_main_short.search_rfc_main_short(number_rfc)
        speaking = rfc_short_json["–û–±—Å—É–∂–¥–µ–Ω–∏—è"]
        # vlogs = rfc_info["–í–ª–æ–∂–µ–Ω–∏—è"]
        # usl_work = rfc_info["–£—Å–ª–æ–≤–∏—è–ü—Ä–æ–≤–µ–¥–µ–Ω–∏—è–†–∞–±–æ—Ç"]
        # st_rfc_1c = str(rfc_info["–°—Ç–∞—Ç—É—Å"])
        # uuid = str(rfc_info["–£–ò–î_–ó–ù–ò"])
        # number_rfc = str(rfc_info["–ù–æ–º–µ—ÄRFC"])
        # number_rfc_bank = rfc_info["–ù–æ–º–µ—Ä–ë–∞–Ω–∫–∞"]
        # name_rfc = str(rfc_info["–ù–∞–∑–≤–∞–Ω–∏–µ"])
        # word_file = str(rfc_info["–§–∞–π–ªWord"])
        # agreements = rfc_info["–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è"]
        # vlogs = rfc_short_json["–í–ª–æ–∂–µ–Ω–∏—è"]
        number_rfc = rfc_short_json["–ù–æ–º–µ—ÄRFC"]
        name_rfc = rfc_short_json["–ù–∞–∑–≤–∞–Ω–∏–µ"]

        full_speaking_answer = "–ò—Å—Ç–æ—Ä–∏—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è RFC \n" + \
                               "<b>" + str(number_rfc) + " - " + str(name_rfc) + "</b>\n" + \
                               " \n"
        for sp in speaking:
            full_speaking_answer += "‚óè <b>" + str(sp['–ü–µ—Ä–∏–æ–¥'][:-3]) + "</b> \n" + \
                                    str(sp['–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å']) + " ‚û°Ô∏è " + str(sp['–ü–æ–ª—É—á–∞—Ç–µ–ª—å']) + "\n" + \
                                    "<b>" + str(sp['–¢–µ–∫—Å—Ç–°–æ–æ–±—â–µ–Ω–∏—è']) + "</b>\n \n"
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
        if len(full_speaking_answer) > 4096:
            for x in range(0, len(full_speaking_answer), 4096):
                client.send_chat_action(call.message.chat.id, action="typing")
                client.send_message(call.message.chat.id,
                                    str(full_speaking_answer[x:x + 4096]),
                                    parse_mode="html", protect_content=protect_content_check,
                                    link_preview_options=types.LinkPreviewOptions(is_disabled=True))
        else:
            client.send_chat_action(call.message.chat.id, action="typing")
            client.send_message(call.message.chat.id, full_speaking_answer,
                                parse_mode="html", protect_content=protect_content_check,
                                link_preview_options=types.LinkPreviewOptions(is_disabled=True))
        return

    if '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' in call.data:
        speaking = str(call.data)
        speaking_list = speaking.split()
        number_rfc = speaking_list[1]
        rfc_short_json = search_rfc_main_short.search_rfc_main_short(number_rfc)
        add_list = rfc_short_json["–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"]
        # vlogs = rfc_info["–í–ª–æ–∂–µ–Ω–∏—è"]
        # usl_work = rfc_info["–£—Å–ª–æ–≤–∏—è–ü—Ä–æ–≤–µ–¥–µ–Ω–∏—è–†–∞–±–æ—Ç"]
        # st_rfc_1c = str(rfc_info["–°—Ç–∞—Ç—É—Å"])
        # uuid = str(rfc_info["–£–ò–î_–ó–ù–ò"])
        # number_rfc = str(rfc_info["–ù–æ–º–µ—ÄRFC"])
        # number_rfc_bank = rfc_info["–ù–æ–º–µ—Ä–ë–∞–Ω–∫–∞"]
        # name_rfc = str(rfc_info["–ù–∞–∑–≤–∞–Ω–∏–µ"])
        # word_file = str(rfc_info["–§–∞–π–ªWord"])
        # agreements = rfc_info["–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è"]
        # vlogs = rfc_short_json["–í–ª–æ–∂–µ–Ω–∏—è"]
        number_rfc = rfc_short_json["–ù–æ–º–µ—ÄRFC"]
        name_rfc = rfc_short_json["–ù–∞–∑–≤–∞–Ω–∏–µ"]

        full_speaking_answer = "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫ RFC \n" + \
                               "<b>" + str(number_rfc) + " - " + str(name_rfc) + "</b>\n" + \
                               " \n" + \
                               f"{add_list}\n"

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
        if len(full_speaking_answer) > 4096:
            for x in range(0, len(full_speaking_answer), 4096):
                client.send_chat_action(call.message.chat.id, action="typing")
                client.send_message(call.message.chat.id,
                                    str(full_speaking_answer[x:x + 4096]),
                                    parse_mode="html", protect_content=protect_content_check,
                                    link_preview_options=types.LinkPreviewOptions(is_disabled=True))
        else:
            client.send_chat_action(call.message.chat.id, action="typing")
            client.send_message(call.message.chat.id, full_speaking_answer,
                                parse_mode="html", protect_content=protect_content_check,
                                link_preview_options=types.LinkPreviewOptions(is_disabled=True))
        return

    # –ü–û–ò–°–ö –ü–†–ò –ù–ê–ñ–ê–¢–ò–ò –ù–ê –ö–ù–û–ü–ö–£, –ò–ó –ö–õ–ê–í–ò–ê–¢–£–†–´ –í–ê–†–ò–ê–ù–¢–û–í
    result_number = re.search(neuron.pattern_5_callback,
                              call.data)
    if result_number is not None:
        result_number = result_number.group(0)
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–º –∫—Ç–æ –∏ —á—Ç–æ –∏—â–µ—Ç –≤ –∂—É—Ä–Ω–∞–ª –ª–æ–≥–æ–≤
        rfc_search.search_rfc_main(client, result_number, call.message, us_id,
                                   us_name, us_surname, username, protect_content_check)
        return

    if call.data == '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç':
        client.send_message(call.message.chat.id, "‚ö† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ RFC –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                                                  " –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\n"
                                                  " \n"
                                                  "–í–æ–∑–º–æ–∂–Ω–æ RFC –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ <b>–°–æ–∑–¥–∞–Ω–∏–µ</b> –∏ "
                                                  "–µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ. "
                                                  "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ", parse_mode="html",
                            protect_content=protect_content_check)
        cursor.execute(f'SELECT advice FROM advice_rfc WHERE user_id = {us_id}')
        advice = cursor.fetchone()[0]
        if advice == "advice on":
            clue = "–°–æ–∑–¥–∞–Ω–∏–µ"
            clue_answer = clues.clue_info(clue)
            client.send_message(call.message.chat.id, str(clue_answer), parse_mode="html",
                                protect_content=protect_content_check)
        return

    if call.data == '—à–∞–±–ª–æ–Ω—ã':
        client.send_message(call.message.chat.id,
                            '–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã\n'
                            ' \n'
                            f'‚óè <code>{long_text.body_mailing}</code>\n'
                            ' \n'
                            f'‚óè <code>{long_text.body_mailing_inaccessibility}</code>\n'
                            ' \n'
                            f'‚óè <code>{long_text.body_mailing_dost}</code>\n',
                            protect_content=protect_content_check, parse_mode="html")
        return

    if call.data == '–Ω–∞–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É':
        client.send_message(call.message.chat.id,
                            "–í—ã –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫. \n"
                            "–°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Å–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ, "
                            "–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏. \n"
                            "–ü—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞, "
                            "–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancellation",
                            parse_mode="html",
                            protect_content=protect_content_check)

        postgres_init.rfc_number(user_id=us_id, user_name=us_name, user_surname=us_surname,
                                 username=username, search_rfc=19, last_rfc_number="XXXX/202X")
        return

    if call.data == '–ø–æ–º–æ—â—å –ø—Ä–∏ –±–ª–æ–∫–µ':
        client.send_message(call.message.chat.id,
                            "‚óè –ü–æ—á—Ç–∞ –æ—Ç–¥–µ–ª–∞: <b>" + str(configs.email_name) + "</b>\n"
                                                                              "‚óè –ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–¥–µ–ª–∞: <b>" + str(
                                configs.workers['rfc_manager1']['–°—Å—ã–ª–∫–∞']) + "</b>,"
                                                                             " <b>" + str(
                                configs.workers['rfc_manager2']['–°—Å—ã–ª–∫–∞']) + "</b>\n"
                                                                             ' \n' +
                            '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: \n' +
                            str(configs.link['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±–æ—Ç']) + '\n' +
                            str(configs.link['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è 1c']) + '\n', parse_mode="html",
                            protect_content=protect_content_check)
        return
    if call.data == '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è 1—Å':
        client.send_chat_action(call.message.chat.id, action="typing")
        client.send_message(call.message.chat.id,
                            "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
                            "–ò–° 1–°, –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>'–°–º–∏—Ä–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä'</b>\n",
                            parse_mode="html",
                            protect_content=protect_content_check)
        postgres_init.authentication_1c(user_id=us_id, user_login='', hash_password='',
                                        check_access=1, last_data=call.message.date)
        return
    if call.data == '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞':
        markup = keyboards.menu_keyboard(us_id)
        client.send_chat_action(call.message.chat.id, action="typing")
        client.send_message(call.message.chat.id, "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n"
                                                  " \n"
                                                  "–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Å—Ç–∞—Ç—É—Å RFC, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã.\n"
                                                  "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª.", reply_markup=markup,
                            parse_mode="html",
                            protect_content=protect_content_check)
        return
    if call.data == '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é':
        client.send_chat_action(call.message.chat.id, action="typing")
        client.send_message(call.message.chat.id, "<b>–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é</b>\n"
                                                  " \n"
                                                  "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –∏–¥–µ—é. "
                                                  "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å–∏—Å—Ç–µ–º—ã.\n",
                            parse_mode="html", protect_content=protect_content_check)
        postgres_init.rfc_number(user_id=us_id, user_name=us_name, user_surname=us_surname, username=username,
                                 search_rfc=9, last_rfc_number="XXXX/202X")
        return
    if call.data == '–û–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º':
        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–û–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º')

        client.send_chat_action(call.message.chat.id, action="typing")
        markup = types.InlineKeyboardMarkup(row_width=2)
        item1 = types.InlineKeyboardButton('‚úî –û–∑–Ω–∞–∫–æ–º–ª–µ–Ω',
                                           callback_data='–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞')
        markup.add(item1)
        client.send_message(call.message.chat.id,
                            str(long_text.familiarization),
                            reply_markup=markup, parse_mode="html", protect_content=protect_content_check)
        return
    if call.data == '–°—Ç–∞—Ç—É—Å—ã RFC —Å–ø–∏—Å–∫–æ–º':
        answer_rfc_statistic = rfc_statistic.simple_rfc_statistic()
        # print(answer_rfc_statistic)
        client.send_message(call.message.chat.id,
                            answer_rfc_statistic,
                            parse_mode="html", protect_content=protect_content_check)
        return
    if call.data == '–ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':
        # premium_ch = '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'
        if call.from_user.is_premium:
            premium_ch = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∞'
        else:
            premium_ch = '–û—Ç–∫–ª—é—á–µ–Ω–∞'

        if call.message.chat.username is not None:
            username = f'@{call.message.chat.username}'
        else:
            username = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        cursor.execute(f'SELECT user_login FROM authentication_1c WHERE user_id = {us_id}')
        user_login = cursor.fetchone()[0]
        cursor.execute(f'SELECT department FROM initialization_user WHERE user_id = {us_id}')
        department = cursor.fetchone()[0]
        cursor.execute(f'SELECT guid FROM initialization_user WHERE user_id = {us_id}')
        guid_1c = cursor.fetchone()[0]

        answer_user_card = f'<b>üì∞ –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n' \
                           '\n' \
                           f'‚óè ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{call.message.chat.id}</code>\n' \
                           f'‚óè –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{user_login}</code>\n' \
                           f'‚óè –û—Ç–¥–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{department}</code>\n' \
                           f'‚óè GUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{guid_1c}</code>\n' \
                           f'\n' \
                           f'‚óè –ù–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{username}</b>\n' \
                           f'‚óè –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{call.from_user.language_code}</b>\n' \
                           f'‚óè –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞: <b>{premium_ch}</b>\n'

        client.send_message(call.message.chat.id, answer_user_card,
                            parse_mode="html", protect_content=protect_content_check)
        return

    if 'HH' in call.data:
        my_st = call.data

        clue_list = my_st.split(",")
        clue_list.pop(0)
        clue_answer_text = ''

        for clue_el in clue_list:
            if clue_el != '':
                clue_paragraph = clues.clue_info(clue_el)
                clue_answer_text += clue_paragraph + ' \n'

        msg_clue_answer = client.send_message(call.message.chat.id, clue_answer_text,
                                              parse_mode="html",
                                              protect_content=protect_content_check)
        time.sleep(15)
        client.delete_message(call.message.chat.id, msg_clue_answer.message_id)
        return

    if call.data == 'config –∑–∞–ø—Ä–æ—Å':
        config_line = settings_config.output_config_line(us_id)
        client.send_message(call.message.chat.id,
                            "–ù–∞–ø—Ä–∞–≤–ª—è—é –í–∞–º config —Å–∏—Å—Ç–µ–º—ã: \n"
                            "<b><code>" + str(config_line) + "</code></b>",
                            parse_mode="html", protect_content=protect_content_check)
        return

    if call.data == '–°erberus error':
        client.send_message(call.message.chat.id,
                            '–ï—Å–ª–∏ –í—ã —É–≤–µ—Ä–µ–Ω—ã –≤ –ª–µ–≥–∏—Ç–∏–º–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ, —Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ '
                            '–ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start, '
                            '–ª–∏–±–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Ä–µ—Å—É—Ä—Å–∞.\n',
                            parse_mode="html", protect_content=protect_content_check)
        return

    if call.data == '–°erberus':
        client.send_message(call.message.chat.id,
                            str(long_text.cerberus_command_description),
                            parse_mode="html", protect_content=protect_content_check)
        return

    if call.data == '–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫':
        client.send_chat_action(call.message.chat.id, action="typing")
        # –ø–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        keyboard = keyboards.main_setting_keyboard(us_id)
        client.send_message(call.message.chat.id, "<b>–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫</b>\n"
                                                  " \n"
                                                  "–†–∞–∑–¥–µ–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å. "
                                                  "–ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä —Å–∏—Å—Ç–µ–º—ã\n"
                                                  " \n",
                            parse_mode="html", reply_markup=keyboard, protect_content=protect_content_check)
        return
    ################################################################################
    # –ú–ï–ù–Æ –ù–ê–°–¢–†–û–ï–ö#################################################################
    ################################################################################
    # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ–∫–∞–∑–∞ push
    show_alert_pr = False
    # ------------------------------------------------------------------------------------------------------------------
    if call.data == '–æ–ø–∏—Å–∞–Ω–∏–µ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ RFC':
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        one = types.InlineKeyboardButton('üî¥ –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                                         callback_data='–ø–æ–ª–Ω–æ–µ')
        two = types.InlineKeyboardButton('üü¢ –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                                         callback_data='–∫—Ä–∞—Ç–∫–æ–µ')
        keyboard.add(one, two)
        # keyboard.add(Button_setting)

        # –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            cursor.execute(f'SELECT view_rfc FROM full_view_rfc WHERE user_id = {us_id}')
            view_rfc = cursor.fetchone()[0]
        except (Exception,):
            view_rfc = '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ'

        if view_rfc == "full":
            view_rfc = "–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        else:
            view_rfc = "–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        # ---------------------------------------------------------

        client.send_message(call.message.chat.id,
                            "<b>‚óè –§–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ RFC</b>\n"
                            " \n"
                            "–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ RFC. "
                            "–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∫–ª—é—á–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ, "
                            "–Ω–æ —Ä–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ.\n"
                            " \n"
                            f"–°–µ–π—á–∞—Å: <b>{view_rfc}</b>",
                            parse_mode="html", reply_markup=keyboard, protect_content=protect_content_check)
        return
    if call.data == '–ø–æ–ª–Ω–æ–µ':
        postgres_init.full_view_rfc(user_id=us_id, user_name=us_name, user_surname=us_surname,
                                    username=username, view_rfc="full")
        client.answer_callback_query(callback_query_id=call.id,
                                     text="–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ RFC",
                                     show_alert=False)
        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–∏—Å–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± RFC (–ü–æ–ª–Ω–æ–µ)')
        return
    elif call.data == '–∫—Ä–∞—Ç–∫–æ–µ':
        postgres_init.full_view_rfc(user_id=us_id, user_name=us_name, user_surname=us_surname,
                                    username=username, view_rfc="not full")
        client.answer_callback_query(callback_query_id=call.id,
                                     text="–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ RFC",
                                     show_alert=show_alert_pr)
        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–∏—Å–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± RFC (–ö—Ä–∞—Ç–∫–æ–µ)')
        return
    # ------------------------------------------------------------------------------------------------------------------
    # callback –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
    if call.data == '–æ–ø–∏—Å–∞–Ω–∏–µ –°—Ç–∞—Ç—É—Å –ø–æ–¥—Å–∫–∞–∑–æ–∫':
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        one = types.InlineKeyboardButton('üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏',
                                         callback_data='–û—Ç–∫–ª—é—á–∏—Ç—å')
        two = types.InlineKeyboardButton('üü¢ –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏',
                                         callback_data='–í–∫–ª—é—á–∏—Ç—å')
        keyboard.add(one, two)

        # –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            cursor.execute(f'SELECT advice FROM advice_rfc WHERE user_id = {us_id}')
            advice = cursor.fetchone()[0]
        except (Exception,):
            advice = '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ'

        if advice == "advice off":
            advice = "–ü–æ–¥—Å–∫–∞–∑–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã"
        else:
            advice = "–ü–æ–¥—Å–∫–∞–∑–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã"
        # ---------------------------------------------------------

        client.send_message(call.message.chat.id, "<b>‚óè –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–æ–≤</b>\n"
                                                  " \n"
                                                  "–ü–æ–¥—Å–∫–∞–∑–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ RFC "
                                                  "–∏ —Å–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n"
                                                  " \n"
                                                  f"–°–µ–π—á–∞—Å: <b>{advice}</b>",
                            parse_mode="html", reply_markup=keyboard, protect_content=protect_content_check)
        return
    elif call.data == '–û—Ç–∫–ª—é—á–∏—Ç—å':
        postgres_init.advice_rfc(user_id=us_id, user_name=us_name, user_surname=us_surname,
                                 username=username, advice="advice off")
        client.answer_callback_query(callback_query_id=call.id,
                                     text="–ü–æ–¥—Å–∫–∞–∑–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã",
                                     show_alert=show_alert_pr)
        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ (–û—Ç–∫–ª—é—á–µ–Ω—ã)')
        return
    elif call.data == '–í–∫–ª—é—á–∏—Ç—å':
        postgres_init.advice_rfc(user_id=us_id, user_name=us_name, user_surname=us_surname,
                                 username=username, advice="advice on")
        client.answer_callback_query(callback_query_id=call.id,
                                     text="–ü–æ–¥—Å–∫–∞–∑–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã",
                                     show_alert=show_alert_pr)
        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ (–í–∫–ª—é—á–µ–Ω—ã)')
        return

    # ------------------------------------------------------------------------------------------------------------------
    # callback –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞
    if call.data == '–¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞':
        client.send_chat_action(call.message.chat.id, action="typing")
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        one = types.InlineKeyboardButton('üî¥ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç',
                                         callback_data='–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç')
        two = types.InlineKeyboardButton('üü¢ –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç',
                                         callback_data='—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç')
        keyboard.add(one, two)

        # –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            cursor.execute(f'SELECT stop200 FROM len_200 WHERE user_id = {us_id}')
            stop200 = cursor.fetchone()[0]
        except (Exception,):
            stop200 = '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ'

        if stop200 == "False":
            stop200 = "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–Ω—è—Ç–æ"
        else:
            stop200 = "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        # ---------------------------------------------------------

        client.send_message(call.message.chat.id,
                            "<b>‚óè –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ RFC</b>\n"
                            " \n"
                            "–î–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∫—Ä–∞—â–∞—Ç—å –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞, –±–æ–ª–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤. "
                            "–°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ. "
                            "–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç, —Å–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ.\n"
                            " \n"
                            f"–°–µ–π—á–∞—Å: <b>{stop200}</b>",
                            parse_mode="html", reply_markup=keyboard, protect_content=protect_content_check)
        return
    if call.data == '–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç':
        postgres_init.len_200(user_id=us_id, user_name=us_name, user_surname=us_surname,
                              username=username, stop200="False")
        client.answer_callback_query(callback_query_id=call.id,
                                     text="–°–Ω—è—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 200 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ",
                                     show_alert=show_alert_pr)
        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞ (–ü–æ–ª–Ω—ã–π)')
        return
    if call.data == '—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç':
        postgres_init.len_200(user_id=us_id, user_name=us_name, user_surname=us_surname,
                              username=username, stop200="True")
        client.answer_callback_query(callback_query_id=call.id,
                                     text="–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 200 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ",
                                     show_alert=show_alert_pr)
        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞ (–ö—Ä–∞—Ç–∫–∏–π)')
        return

    # ------------------------------------------------------------------------------------------------------------------
    # –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–ª–æ–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    if call.data == '–æ—Ü–µ–Ω–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤':
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        one = types.InlineKeyboardButton('üü¢ –í–∫–ª—é—á–∏—Ç—å',
                                         callback_data='–æ—Ü–µ–Ω–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞')
        two = types.InlineKeyboardButton('üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å',
                                         callback_data='–æ—Ü–µ–Ω–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞')
        keyboard.add(one, two)

        # –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            cursor.execute(f'SELECT grade_el FROM grade_el_table WHERE user_id = {us_id}')
            grade_el = cursor.fetchone()[0]
        except (Exception,):
            grade_el = '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ'

        if grade_el == "True":
            grade_el = "–§—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞"
        else:
            grade_el = "–§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"
        # ---------------------------------------------------------

        client.send_message(call.message.chat.id,
                            "<b>‚óè –û—Ü–µ–Ω–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤</b>\n"
                            " \n"
                            "–î–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É –ø–æ–ø–∞–¥–∞–Ω–∏—è RFC "
                            "–≤ –ø–ª–∞–Ω —Ä–∞–±–æ—Ç. "
                            "–í–∫–ª—é—á–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –æ—Ü–µ–Ω–∫—É –∏ –∞–Ω–∞–ª–∏–∑ RFC. –°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã "
                            "–º–æ–∂–µ—Ç –ø–æ–Ω–∏–∑–∏—Ç—å—Å—è. \n"
                            "–í—ã–∫–ª—é—á–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã"
                            "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ü–µ–Ω–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞\n"
                            " \n"
                            f"–°–µ–π—á–∞—Å: <b>{grade_el}</b>",
                            reply_markup=keyboard,
                            parse_mode="html", protect_content=protect_content_check)
        return
    if call.data == '–æ—Ü–µ–Ω–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞':
        postgres_init.grade_el_fn(user_id=us_id, user_name=us_name, user_surname=us_surname,
                                  username=username, grade_el="True")
        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ü–µ–Ω–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ (–†–∞–∑—Ä–µ—à–µ–Ω–∞)')
        client.answer_callback_query(callback_query_id=call.id,
                                     text="–í—ã –≤–∫–ª—é—á–∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é –æ—Ü–µ–Ω–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤",
                                     show_alert=show_alert_pr)
        return
    if call.data == '–æ—Ü–µ–Ω–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞':
        postgres_init.grade_el_fn(user_id=us_id, user_name=us_name, user_surname=us_surname,
                                  username=username, grade_el="False")
        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ü–µ–Ω–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ (–ó–∞–ø—Ä–µ—â–µ–Ω–∞)')
        client.answer_callback_query(callback_query_id=call.id,
                                     text="–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é –æ—Ü–µ–Ω–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤",
                                     show_alert=show_alert_pr)
        return

    # ------------------------------------------------------------------------------------------------------------------
    # –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–ª–æ–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫
    if call.data == '–†–∞—Å—Å—ã–ª–∫–∏':
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        one = types.InlineKeyboardButton('üü¢ –†–∞–∑—Ä–µ—à–∏—Ç—å',
                                         callback_data='–†–∞—Å—Å—ã–ª–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã')
        two = types.InlineKeyboardButton('üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å',
                                         callback_data='–†–∞—Å—Å—ã–ª–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
        keyboard.add(one, two)

        # –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            cursor.execute(f'SELECT add_block FROM add_block_table WHERE user_id = {us_id}')
            add_block = cursor.fetchone()[0]
        except (Exception,):
            add_block = '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ'

        if add_block == "False":
            add_block = "–†–∞—Å—Å—ã–ª–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã"
        else:
            add_block = "–†–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã"
        # ---------------------------------------------------------

        client.send_message(call.message.chat.id,
                            "<b>‚óè –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—Å—ã–ª–æ–∫</b>\n"
                            " \n"
                            "–î–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ä–∞—Å—Å—ã–ª–∫–∏. "
                            "RFC Informer bot –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± "
                            "–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö. "
                            "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã\n"
                            " \n"
                            f"–°–µ–π—á–∞—Å: <b>{add_block}</b>",
                            reply_markup=keyboard,
                            parse_mode="html", protect_content=protect_content_check)
        return
    if call.data == '–†–∞—Å—Å—ã–ª–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã':
        postgres_init.add_block_fn(user_id=us_id, user_name=us_name, user_surname=us_surname,
                                   username=username, add_block="False")
        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫ (–†–∞–∑—Ä–µ—à–µ–Ω—ã)')
        client.answer_callback_query(callback_query_id=call.id,
                                     text="–í—ã —Ä–∞–∑—Ä–µ—à–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —Ä–∞—Å—Å—ã–ª–∫–∏",
                                     show_alert=show_alert_pr)
        return
    if call.data == '–†–∞—Å—Å—ã–ª–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã':
        postgres_init.add_block_fn(user_id=us_id, user_name=us_name, user_surname=us_surname,
                                   username=username, add_block="True")
        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫ (–ó–∞–ø—Ä–µ—â–µ–Ω—ã)')
        client.answer_callback_query(callback_query_id=call.id,
                                     text="–í—ã –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —Ä–∞—Å—Å—ã–ª–∫–∏",
                                     show_alert=show_alert_pr)
        return
    # ------------------------------------------------------------------------------------------------------------------
    # –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–ª–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫
    if call.data == '–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫':
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        one = types.InlineKeyboardButton('üü¢ –†–∞–∑—Ä–µ—à–∏—Ç—å',
                                         callback_data='–û—à–∏–±–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è')
        two = types.InlineKeyboardButton('üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å',
                                         callback_data='–û—à–∏–±–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è')
        keyboard.add(one, two)

        # –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            cursor.execute(f'SELECT error FROM error_table WHERE user_id = {us_id}')
            add_block = cursor.fetchone()[0]
        except (Exception,):
            add_block = 'yes'

        if add_block == "yes":
            add_block = "–û—à–∏–±–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è"
        else:
            add_block = "–û—à–∏–±–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è"
        # ---------------------------------------------------------

        client.send_message(call.message.chat.id,
                            "<b>‚óè –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫</b>\n"
                            " \n"
                            "–î–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö. "
                            "RFC Informer bot –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–ø–∏—Å–∏ –æ—à–∏–±–æ–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± "
                            "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–±–æ—è—Ö –≤ —Å–∏—Å—Ç–µ–º–µ. "
                            "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—à–∏–±–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º\n"
                            " \n"
                            f"–°–µ–π—á–∞—Å: <b>{add_block}</b>",
                            reply_markup=keyboard,
                            parse_mode="html", protect_content=protect_content_check)
        return
    if call.data == '–û—à–∏–±–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è':
        postgres_init.error_table_fn(user_id=us_id, error='yes')
        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫ (–í–∫–ª—é—á–µ–Ω—ã)')
        client.answer_callback_query(callback_query_id=call.id,
                                     text="–í—ã —Ä–∞–∑—Ä–µ—à–∏–ª–∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ–± –æ—à–∏–±–∫–∞—Ö",
                                     show_alert=show_alert_pr)
        return
    if call.data == '–û—à–∏–±–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è':
        postgres_init.error_table_fn(user_id=us_id, error='no')
        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫ (–û—Ç–∫–ª—é—á–µ–Ω—ã)')
        client.answer_callback_query(callback_query_id=call.id,
                                     text="–í—ã –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ–± –æ—à–∏–±–∫–∞—Ö",
                                     show_alert=show_alert_pr)
        return

    # ------------------------------------------------------------------------------------------------------------------
    # –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    if call.data == '–≤–∏–¥ –∫–∞–ª–µ–Ω–¥–∞—Ä—è':
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        one = types.InlineKeyboardButton('üî¥ –ü–æ–ª–Ω—ã–π',
                                         callback_data='–∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–ª–Ω—ã–π')
        two = types.InlineKeyboardButton('üü¢ –û—Å–Ω–æ–≤–Ω–æ–π',
                                         callback_data='–∫–∞–ª–µ–Ω–¥–∞—Ä—å –æ—Å–Ω–æ–≤–Ω–æ–π')
        keyboard.add(one, two)

        # –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            cursor.execute(f'SELECT calendar_view FROM calendar_table WHERE user_id = {us_id}')
            calendar_view = cursor.fetchone()[0]
        except (Exception,):
            calendar_view = '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ'

        if calendar_view == "Full":
            calendar_view = "–í–∏–¥ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–ü–æ–ª–Ω—ã–π)"
        else:
            calendar_view = "–í–∏–¥ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–û—Å–Ω–æ–≤–Ω–æ–π)"

        client.send_message(call.message.chat.id,
                            "<b>‚óè –ö–∞–ª–µ–Ω–¥–∞—Ä—å</b>\n"
                            " \n"
                            "–î–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤–∏–¥ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Ä–∞–±–æ—Ç "
                            "–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—â—É—é –≤ –Ω–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –î–æ—Å—Ç—É–ø–Ω—ã –¥–≤–∞ —Ä–µ–∂–∏–º–∞: \n"
                            "–û—Å–Ω–æ–≤–Ω–æ–π - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ RFC –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –±–∞–Ω–∫–µ. \n"
                            "–ü–æ–ª–Ω—ã–π - –≤—Å–µ RFC –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. \n"
                            "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—Å–µ RFC\n"
                            " \n"
                            f"–°–µ–π—á–∞—Å: <b>{calendar_view}</b>",
                            reply_markup=keyboard, parse_mode="html", protect_content=protect_content_check)
        return
    if call.data == '–∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–ª–Ω—ã–π':
        postgres_init.calendar_fn(user_id=us_id, user_name=us_name, user_surname=us_surname,
                                  username=username, calendar_view="Full")
        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∏–¥–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–ü–æ–ª–Ω—ã–π)')
        client.answer_callback_query(callback_query_id=call.id,
                                     text="–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö RFC –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ —Ä–∞–±–æ—Ç",
                                     show_alert=show_alert_pr)
        return
    if call.data == '–∫–∞–ª–µ–Ω–¥–∞—Ä—å –æ—Å–Ω–æ–≤–Ω–æ–π':
        postgres_init.calendar_fn(user_id=us_id, user_name=us_name, user_surname=us_surname,
                                  username=username, calendar_view="Not Full")
        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∏–¥–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–û—Å–Ω–æ–≤–Ω–æ–π)')
        client.answer_callback_query(callback_query_id=call.id,
                                     text="–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö RFC –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ —Ä–∞–±–æ—Ç",
                                     show_alert=show_alert_pr)
        return
    # ------------------------------------------------------------------------------------------------------------------
    # –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è
    if call.data == '–º–æ–¥—É–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏':
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        one = types.InlineKeyboardButton('üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å',
                                         callback_data='–º–æ–¥—É–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')
        two = types.InlineKeyboardButton('üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å',
                                         callback_data='–º–æ–¥—É–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')
        keyboard.add(one, two)

        # –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            cursor.execute(f'SELECT personal_mode FROM personal_mode_table WHERE user_id = {us_id}')
            personal_mode = cursor.fetchone()[0]
        except (Exception,):
            personal_mode = '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ'

        if personal_mode == "on":
            personal_mode = "–ú–æ–¥—É–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
        else:
            personal_mode = "–ú–æ–¥—É–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"

        client.send_message(call.message.chat.id,
                            "<b>‚óè –ú–æ–¥—É–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏</b>\n"
                            " \n"
                            "–ú–æ–¥—É–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –±–ª–æ–∫ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ "
                            "–±–æ–ª–µ–µ –ª–µ–≥–∫—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å RFC Informer Bot. "
                            "–î–æ—Å—Ç—É–ø–Ω—ã –¥–≤–∞ —Ä–µ–∂–∏–º–∞: \n"
                            "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. \n"
                            "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ RFC. \n"
                            "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–æ–¥—É–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n"
                            " \n"
                            f"–°–µ–π—á–∞—Å: <b>{personal_mode}</b>",
                            reply_markup=keyboard, parse_mode="html", protect_content=protect_content_check)
        return
    if call.data == '–º–æ–¥—É–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω':
        postgres_init.personal_mode_fn(user_id=us_id, personal_mode='off')
        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–ú–æ–¥—É–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')
        client.answer_callback_query(callback_query_id=call.id,
                                     text="–í—ã –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –º–æ–¥—É–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏",
                                     show_alert=show_alert_pr)
        return
    if call.data == '–º–æ–¥—É–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω':
        postgres_init.personal_mode_fn(user_id=us_id, personal_mode='on')
        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–ú–æ–¥—É–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')
        client.answer_callback_query(callback_query_id=call.id,
                                     text="–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –º–æ–¥—É–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏",
                                     show_alert=show_alert_pr)
        return
    # ------------------------------------------------------------------------------------------------------------------
    # –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—è –¥–µ–∂—É—Ä–Ω—ã—Ö —Å–º–µ–Ω
    if call.data == '–¥–µ–∂—É—Ä–Ω—ã–µ —Å–º–µ–Ω—ã':
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        one = types.InlineKeyboardButton('‚úÖ –î–µ–∂—É—Ä–Ω—ã–π windows –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                                         callback_data='+ –î–µ–∂—É—Ä–Ω—ã–π windows –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
        two = types.InlineKeyboardButton('‚ùå –î–µ–∂—É—Ä–Ω—ã–π windows –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                                         callback_data='- –î–µ–∂—É—Ä–Ω—ã–π windows –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
        three = types.InlineKeyboardButton('‚úÖ –î–µ–∂—É—Ä–Ω—ã–π unix –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                                           callback_data='+ –î–µ–∂—É—Ä–Ω—ã–π unix –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
        four = types.InlineKeyboardButton('‚ùå –î–µ–∂—É—Ä–Ω—ã–π unix –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                                          callback_data='- –î–µ–∂—É—Ä–Ω—ã–π unix –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
        keyboard.add(one, two)
        keyboard.add(three, four)

        client.send_message(call.message.chat.id,
                            "<b>‚óè –î–µ–∂—É—Ä–Ω—ã–µ —Å–º–µ–Ω—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ</b>\n"
                            " \n"
                            "–î–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∏–ª–∏ —É–¥–∞–ª—è—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ "
                            "—Ä–∞–±–æ—Ç—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–∂—É—Ä–Ω—ã—Ö —Å–º–µ–Ω. "
                            "–î–æ—Å—Ç—É–ø–Ω—ã –¥–≤–∞ —Ä–µ–∂–∏–º–∞: \n"
                            "–î–æ–±–∞–≤–∏—Ç—å - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ —Å–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ä–∞–±–æ—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–∂—É—Ä–Ω–æ–≥–æ \n"
                            "–£–¥–∞–ª–∏—Ç—å - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–µ–∂—É—Ä–Ω–æ–º –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ \n",
                            reply_markup=keyboard, parse_mode="html", protect_content=protect_content_check)
        return

    if call.data == '+ –î–µ–∂—É—Ä–Ω—ã–π windows –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
        cursor.execute(f'SELECT * FROM initialization_user WHERE user_id = {us_id}')
        user_list = cursor.fetchall()[0]
        guid = f'{user_list[4]},01e22cdd-9707-11ed-8103-005056844352'

        postgres_init.initialization(user_id=user_list[0], user_name=user_list[1], username=user_list[2],
                                     department=user_list[3], guid=guid, access=user_list[5])

        client.answer_callback_query(callback_query_id=call.id,
                                     text="–†–∞–±–æ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã",
                                     show_alert=show_alert_pr)
        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–∞–±–æ—Ç—ã windows –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤')

    if call.data == '+ –î–µ–∂—É—Ä–Ω—ã–π unix –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
        cursor.execute(f'SELECT * FROM initialization_user WHERE user_id = {us_id}')
        user_list = cursor.fetchall()[0]
        guid = f'{user_list[4]},c5c2591b-973e-11ed-8103-005056844352'

        postgres_init.initialization(user_id=user_list[0], user_name=user_list[1], username=user_list[2],
                                     department=user_list[3], guid=guid, access=user_list[5])

        client.answer_callback_query(callback_query_id=call.id,
                                     text="–†–∞–±–æ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã",
                                     show_alert=show_alert_pr)
        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–∞–±–æ—Ç—ã unix –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤')

    if call.data == '- –î–µ–∂—É—Ä–Ω—ã–π windows –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
        cursor.execute(f'SELECT * FROM initialization_user WHERE user_id = {us_id}')
        user_list = cursor.fetchall()[0]

        guid = user_list[4]

        guid = guid.replace(',01e22cdd-9707-11ed-8103-005056844352', '')

        postgres_init.initialization(user_id=user_list[0], user_name=user_list[1], username=user_list[2],
                                     department=user_list[3], guid=guid, access=user_list[5])

        client.answer_callback_query(callback_query_id=call.id,
                                     text="–†–∞–±–æ—Ç—ã —É–¥–∞–ª–µ–Ω—ã",
                                     show_alert=show_alert_pr)
        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–£–±—Ä–∞–Ω—ã —Ä–∞–±–æ—Ç—ã windows –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤')

    if call.data == '- –î–µ–∂—É—Ä–Ω—ã–π unix –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
        cursor.execute(f'SELECT * FROM initialization_user WHERE user_id = {us_id}')
        user_list = cursor.fetchall()[0]

        guid = user_list[4]

        guid = guid.replace(',c5c2591b-973e-11ed-8103-005056844352', '')

        postgres_init.initialization(user_id=user_list[0], user_name=user_list[1], username=user_list[2],
                                     department=user_list[3], guid=guid, access=user_list[5])

        client.answer_callback_query(callback_query_id=call.id,
                                     text="–†–∞–±–æ—Ç—ã —É–¥–∞–ª–µ–Ω—ã",
                                     show_alert=show_alert_pr)
        logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–£–±—Ä–∞–Ω—ã —Ä–∞–±–æ—Ç—ã unix –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤')

    us_id = call.from_user.id

# –ö–ê–õ–ï–ù–î–ê–†–¨ –ö–û–õ–ë–ï–ö----------------------------------------------------------------------------------------------
    # calendar, step = DetailedTelegramCalendar(calendar_id=us_id).build()
    result, key, step = DetailedTelegramCalendar(locale="ru", calendar_id=us_id).process(call.data)
    if not result and key:
        client.edit_message_text("–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –¥–∞—Ç—É",
                                 call.message.chat.id,
                                 call.message.message_id,
                                 reply_markup=key)
    elif result:
        # –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ö–ê–õ–ï–ù–î–ê–†–Ø –ö–û–¢–û–†–ê–Ø –§–û–†–ú–ò–†–£–ï–¢ –ö–ê–î–õ–ï–ù–î–ê–†–¨ –ò –í–û–ó–í–†–ê–©–ê–ï–¢
        # –û–¢–í–ï–¢, –ß–ï–ö –ü–û–í–¢–û–† –ò –°–ü–ò–°–û–ö –†–ê–ë–û–¢ –í –ú–ê–°–ò–í–ï –î–õ–Ø –ö–ù–û–ü–û–ö
        if calendar_build is None:
            client.send_message(call.message.chat.id,
                                "–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. "
                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±–Ω–æ–≤–∏—Ç–µ –∑–∞–ø—Ä–æ—Å /calendar",
                                parse_mode="html",
                                # protect_content=protect_content_check
                                )
            return
        try:
            cursor.execute('SELECT grade_el FROM grade_el_table WHERE user_id = '+str(us_id))
            grade_el_table_zn = cursor.fetchone()[0]
        except (Exception,):
            grade_el_table_zn = "True"
        # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        try:
            cursor.execute('SELECT calendar_view FROM calendar_table WHERE user_id = '+str(us_id))
            calendar_view = str(cursor.fetchone()[0])
        except (Exception,):
            calendar_view = "Full"
        answer, repeat_cldr, answer_list = calendars.answer_calendar_rfc(result,
                                                                         calendar_build,
                                                                         check_l_name,
                                                                         grade_el_table_zn,
                                                                         calendar_view)
        if not repeat_cldr:
            client.answer_callback_query(callback_query_id=call.id,
                                         text=answer,
                                         show_alert=True)
        else:
            logs.log_pass(us_id, '–î–µ–π—Å—Ç–≤–∏–µ', f'–ò–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –¥–∞—Ç–∞: {result}')

            button_name_array = []
            for el_bn in answer_list:
                bn_name = types.InlineKeyboardButton(text=str(el_bn["numberRFC"]),
                                                     callback_data=str(el_bn["numberRFC"]))
                button_name_array.append(bn_name)

            if len(button_name_array) > 5:
                df = 3
            else:
                df = 2
            keyboard = types.InlineKeyboardMarkup(row_width=df)

            keyboard.add(*button_name_array)
            client.send_message(call.message.chat.id, answer,
                                reply_markup=keyboard, parse_mode="html",
                                # protect_content=protect_content_check
                                )
            cursor.execute('SELECT advice FROM advice_rfc WHERE user_id = '+str(us_id))
            advice = cursor.fetchone()[0]
            if advice == "advice on":
                try:
                    cursor.execute('SELECT grade_el FROM grade_el_table WHERE user_id = '+str(us_id))
                    grade_el_table_zn = cursor.fetchone()[0]
                except (Exception,):
                    grade_el_table_zn = "True"

                if grade_el_table_zn == "True":
                    clue_answer_list = []

                    clue_answer = clues.clue_info("–û—Ü–µ–Ω–∫–∞ RFC")
                    clue_answer_list.append(clue_answer)

                    clue_answer_full = ""
                    for clue_answer_el in clue_answer_list:
                        clue_answer_full = clue_answer_full + clue_answer_el + \
                                           " \n"
                    clue_answer_full = clue_answer_full + clues.clue_answer_clue
                    client.send_message(call.message.chat.id, str(clue_answer_full),
                                        parse_mode="html",
                                        # protect_content=protect_content_check
                                        )
        return
