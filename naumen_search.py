import requests
import json

import re

import configs                         # —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–∞, –∫–ª—é—á–µ–π –∏ –ø–∞—Ä–æ–ª–µ–π
import rfc_search                      # –º–æ–¥—É–ª—å –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ rfc
import keyboards
import logs


def naumen_search(uuid):
    url = f"{configs.naumen['link']}/sd/services/rest/get/" + str(uuid) + \
          "?accessKey=" + str(configs.naumen['accessKey'])
    payload = {}
    headers = {'Cookie': configs.naumen['cookie'],
               "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
               }
    response_naumen = requests.request("GET", url=url, headers=headers,
                                       data=payload)
    # print(response5.json())
    code = response_naumen.status_code
    if code == 200:
        code_check = True
    else:
        code_check = False
    naumen_load = response_naumen.json()

    # –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –≤ —Ñ–∞–π–ª
    try:
        file_body = ''
        for k, v in naumen_load.items():
            file_body += f'{k} => {v}\n \n'
        # print(file_body)
        with open(r"logging\last_naumen_search.log", "w", encoding="utf-8") as file:
            file.write(file_body)
    except (Exception,):
        pass

    return naumen_load, code_check


def naumen_search_zni(zni):

    naumen_json = {"number": int(zni)}

    url = f"{configs.naumen['link']}/sd/services/rest/find/changeRequest$changeRequest/{naumen_json}" + \
          "?accessKey=" + str(configs.naumen['accessKey'])
    payload = {}
    headers = {'Cookie': configs.naumen['cookie'],
               "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
               }
    response_naumen = requests.request("GET", url=url, headers=headers,
                                       data=payload)

    answer = response_naumen.text
    answer = answer[1:-1]
    naumen_load = json.loads(answer)

    code = response_naumen.status_code
    if code == 200:
        code_check = True
    else:
        code_check = False

    return naumen_load, code_check


def naumen_serch_pb(number_pb):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞—è–≤–∫–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–∏—Å—Ç–µ–º—ã
    :param number_pb: –Ω–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ serviceCall$1774672498
    :return: —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    url = f"{configs.naumen['link']}/sd/services/rest/get/{number_pb}" + \
          "?accessKey=" + str(configs.naumen['accessKey'])
    payload = {}
    headers = {'Cookie': configs.naumen['cookie'],
               "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
               }
    response_naumen = requests.request("GET", url=url, headers=headers,
                                       data=payload)

    answer = response_naumen.text
    # answer = answer[1:-1]
    json_dump = json.loads(answer)
    # for k, v in json_dump.items():
    #     print(f'{k} => {v}\n \n')
    return json_dump


def naumen_search_zni_for_bank(json_number, change_request):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–∞–±–æ—Ç –ø–æ –Ω–æ–º–µ—Ä—É –ó–ù–ò –≤ —Å–∏—Å—Ç–µ–º–µ –±–∞–Ω–∫–∞.
    :param json_number: –°–ª–æ–≤–∞—Ä—å —Ç–∏–ø–∞ {"number": 15734}, –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞ - –Ω–æ–º–µ—Ä —Ä–∞–±–æ—Ç
    :param change_request: –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–∏—Å—Ç–µ–º—É
    :return: –û—Ç–≤–µ—Ç api –æ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ –±–∞–Ω–∫–∞
    """
    url = f'{configs.naumen["link"]}/sd/services/rest/find/{change_request}/{json_number}' + \
          "?accessKey=" + str(configs.naumen['accessKey'])
    headers = {'Cookie': configs.naumen['cookie'],
               "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
               'Content-Type': 'application/json;charset=UTF-8'
               }
    response_naumen = requests.request("GET", url=url, headers=headers)

    return response_naumen.text


def naumen_creator_message(client, number_zni, message, us_id, us_name, us_surname, username, protect_content_check):
    """
    –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –∑–Ω–∏ –≤ –±–∞–Ω–∫–µ
    :param client: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ç–µ–ª–µ–≥—Ä–∞–º
    :param number_zni: –ù–æ–º–µ—Ä –∑–Ω–∏ –≤ –±–∞–Ω–∫–µ
    :param message: –±–ª–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    :param us_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param us_name: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param us_surname: —Ñ–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param username: –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param protect_content_check: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    :return: –ø—Ä–æ—Ü–µ–¥—É—Ä–∞
    """
    logs.log_pass(us_id, '–ó–∞–ø—Ä–æ—Å', f' –ó–ù–ò {number_zni}')
    json_dump = naumen_search_zni_bank(number_zni)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—ã infosystem jet. –ï—Å–ª–∏ –µ—Å—Ç—å - —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É infosystem jet
    result_search = re.search(r'\d{4}/202\d', json_dump["shortTitle"])
    if result_search is not None:
        task = result_search.group(0)
        rfc_search.search_rfc_main(client, task, message, us_id, us_name, us_surname, username, protect_content_check)
        return

    link_name_rfc = f"<a href='{configs.naumen['link']}/sd/operator/#uuid:" + \
                    str(json_dump["UUID"]) + "'><b>–°—Å—ã–ª–∫–∞ Naumen</b></a>"

    # —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç
    status_naumen, status_naumen_check_closed = status_naumen_correct(json_dump["state"])
    # –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ä–∞–±–æ—Ç
    detail_status_rfc_bank = json_dump["procCodeClose"]
    if detail_status_rfc_bank is not None:
        detail_status_bank = "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç: <b><code>" + \
                             str(detail_status_rfc_bank["title"]) + "</code></b>\n"
    else:
        detail_status_bank = ""

    answer = f'<code>–ó–ù–ò {json_dump["number"]}: {json_dump["shortTitle"]}</code>\n' + \
             f'‚óè {link_name_rfc}\n \n' + \
             f'Task: <code>{json_dump["RequestNumber"]}</code>\n' + \
             f'–°—Ç–∞—Ç—É—Å –≤ –±–∞–Ω–∫–µ: <b><code>{status_naumen}</code></b>\n{detail_status_bank}\n' + \
             f'–°–∏—Å—Ç–µ–º—ã –ó–ù–ò: <code>{json_dump["systemZNI"]}</code>\n' + \
             f'–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: <code>{json_dump["Initiator"]}</code>\n' + \
             f' \n' + \
             f'–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <code>{json_dump["creationDate"]}</code>\n' + \
             f'–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: <code>{json_dump["beginDate"]}</code>\n'
    client.send_message(message.chat.id, answer, parse_mode="html",
                        reply_markup=keyboards.bank_zni_message_keyboard(json_dump["UUID"]),
                        protect_content=protect_content_check)
    return


def naumen_search_zni_bank(number_zni):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–º–µ—Ä –ó–ù–ò, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Naumen, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç json –¥–∞–º–ø
    :param number_zni: –ù–æ–º–µ—Ä —Ä–∞–±–æ—Ç –≤ –±–∞–Ω–∫–µ
    :return: json —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ —Ä–∞–±–æ—Ç–∞–º
    """
    naumen_json = {"number": number_zni}

    answer = naumen_search_zni_for_bank(naumen_json, 'changeRequest$changeRequest')
    if answer == '[]':
        answer = naumen_search_zni_for_bank(naumen_json, 'changeRequest$changeErr')

    answer = answer[1:-1]
    json_dump = json.loads(answer)

    # –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –≤ —Ñ–∞–π–ª
    try:
        file_body = ''
        for k, v in json_dump.items():
            file_body += f'{k} => {v}\n \n'
        # print(file_body)
        with open(r"logging\last_naumen_search.log", "w", encoding="utf-8") as file:
            file.write(file_body)
    except (Exception,):
        pass

    return json_dump


def status_naumen_correct(status_naumen_first):
    status_naumen_check_closed_b = False
    status_naumen_right = None
    if str(status_naumen_first) == "registered":
        status_naumen_right = "üîµ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
        # –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω –Ω–æ–º–µ—Ä
    elif str(status_naumen_first) == "resolved":
        status_naumen_right = "üü° –ó–∞–∫—Ä—ã—Ç–∏–µ"
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞–±–æ—Ç –∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫—Ä—ã—Ç–∏–µ
    elif str(status_naumen_first) == "closed":
        status_naumen_right = "‚ö´Ô∏è –ó–∞–∫—Ä—ã—Ç"
        # –∑–∞–∫—Ä—ã—Ç, –æ–Ω –∏ –≤ –∞—Ñ—Ä–∏–∫–µ –∑–∞–∫—Ä—ã—Ç
        status_naumen_check_closed_b = True
    elif str(status_naumen_first) == "checking":
        status_naumen_right = "üü° –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ"
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ó–ù–ò –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –±–∞–Ω–∫–∞
    elif str(status_naumen_first) == "waiting":
        status_naumen_right = "üî¥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ"
        # –í–Ω–µ—Å–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö. –î–æ—Å—Ç—É–ø–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    elif str(status_naumen_first) == "test":
        status_naumen_right = "üü£ –ê–Ω–∞–ª–∏–∑ –∏ –æ—Ü–µ–Ω–∫–∞ –≤–Ω–µ–¥—Ä–µ–Ω–Ω–æ–≥–æ –ò–∑–º–µ–Ω–µ–Ω–∏—è"
        # –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–∞–±–æ—Ç –æ—Ü–µ–Ω–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º.
        # –ü–æ—è–≤–ª—è–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    elif str(status_naumen_first) == "purpose":
        status_naumen_right = "üü° –ü–µ—Ä–µ–¥–∞—á–∞ –ø–ª–∞–Ω–∞ —Ä–∞–±–æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"
        # –æ–Ω–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –≤—Ä–µ–º—è
    elif str(status_naumen_first) == "intCAB":
        status_naumen_right = "üü° –û—á–Ω—ã–π –°–ê–í"
        # –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ
    elif str(status_naumen_first) == "implementation":
        status_naumen_right = "üî¥ –ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏"
        # –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ
    elif str(status_naumen_first) == "analysis":
        status_naumen_right = "üü¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ –ó–ù–ò"
        # –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –∏ –¥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å—É—é—â–∏—Ö
    elif str(status_naumen_first) == "negotiating":
        status_naumen_right = "üü° –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
        # —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
    elif str(status_naumen_first) == "opinion":
        status_naumen_right = "üü¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –∑–∞–∫–ª—é—á–µ–Ω–∏–π"
        # –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
    elif str(status_naumen_first) == "plan":
        status_naumen_right = "üü¢ –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –∑–∞–∫–ª—é—á–µ–Ω–∏–π"
    # status_naumen_right = f'<code>{status_naumen_right}</code>'
    return status_naumen_right, status_naumen_check_closed_b
